#include "api.hpp"

namespace nb = nanobind;

void imgui_def_api_auto(nb::module_ & m) {
    m.def("DestroyContext", [](ImGuiContext * _ctx) -> void {
        ImGui::DestroyContext(_ctx);
        printf("destroy context: %u\n", (intptr_t)_ctx);
    } , nb::arg("_ctx")=NULL);
    m.def("GetCurrentContext", []() -> ImGuiContext * { return ImGui::GetCurrentContext(); } );
    m.def("SetCurrentContext", [](ImGuiContext * _ctx) -> void { ImGui::SetCurrentContext(_ctx); } , nb::arg("_ctx"));
    m.def("GetIO", []() -> ImGuiIO & { return ImGui::GetIO(); } );
    m.def("GetStyle", []() -> ImGuiStyle & { return ImGui::GetStyle(); } );
    m.def("NewFrame", []() -> void { ImGui::NewFrame(); } );
    m.def("EndFrame", []() -> void { ImGui::EndFrame(); } );
    m.def("Render", []() -> void { ImGui::Render(); } );
    m.def("GetDrawData", []() -> ImDrawData * { return ImGui::GetDrawData(); } );
    m.def("ShowDemoWindow", [](bool * _p_open) -> void { ImGui::ShowDemoWindow(_p_open); } , nb::arg("_p_open")=NULL);
    m.def("ShowMetricsWindow", [](bool * _p_open) -> void { ImGui::ShowMetricsWindow(_p_open); } , nb::arg("_p_open")=NULL);
    m.def("ShowStackToolWindow", [](bool * _p_open) -> void { ImGui::ShowStackToolWindow(_p_open); } , nb::arg("_p_open")=NULL);
    m.def("ShowAboutWindow", [](bool * _p_open) -> void { ImGui::ShowAboutWindow(_p_open); } , nb::arg("_p_open")=NULL);
    m.def("ShowStyleEditor", [](ImGuiStyle * _ref) -> void { ImGui::ShowStyleEditor(_ref); } , nb::arg("_ref")=NULL);
    m.def("ShowStyleSelector", [](nb::str & _label) -> bool { return ImGui::ShowStyleSelector(_label.c_str()); } , nb::arg("_label"));
    m.def("ShowFontSelector", [](nb::str & _label) -> void { ImGui::ShowFontSelector(_label.c_str()); } , nb::arg("_label"));
    m.def("ShowUserGuide", []() -> void { ImGui::ShowUserGuide(); } );
    m.def("GetVersion", []() -> const char * { return ImGui::GetVersion(); } );
    m.def("StyleColorsDark", [](ImGuiStyle * _dst) -> void { ImGui::StyleColorsDark(_dst); } , nb::arg("_dst")=NULL);
    m.def("StyleColorsLight", [](ImGuiStyle * _dst) -> void { ImGui::StyleColorsLight(_dst); } , nb::arg("_dst")=NULL);
    m.def("StyleColorsClassic", [](ImGuiStyle * _dst) -> void { ImGui::StyleColorsClassic(_dst); } , nb::arg("_dst")=NULL);
    m.def("End", []() -> void { ImGui::End(); } );
    m.def("BeginChild", [](nb::str & _str_id, const ImVec2 & _size, bool _border, ImGuiWindowFlags _flags) -> bool { return ImGui::BeginChild(_str_id.c_str(), _size, _border, _flags); } , nb::arg("_str_id"), nb::arg("_size")=ImVec2 ( 0 , 0 ), nb::arg("_border")=false, nb::arg("_flags")=0);
    m.def("EndChild", []() -> void { ImGui::EndChild(); } );
    m.def("IsWindowAppearing", []() -> bool { return ImGui::IsWindowAppearing(); } );
    m.def("IsWindowCollapsed", []() -> bool { return ImGui::IsWindowCollapsed(); } );
    m.def("IsWindowFocused", [](ImGuiFocusedFlags _flags) -> bool { return ImGui::IsWindowFocused(_flags); } , nb::arg("_flags")=0);
    m.def("IsWindowHovered", [](ImGuiHoveredFlags _flags) -> bool { return ImGui::IsWindowHovered(_flags); } , nb::arg("_flags")=0);
    m.def("GetWindowDrawList", []() -> ImDrawList * { return ImGui::GetWindowDrawList(); } );
    m.def("GetWindowPos", []() -> ImVec2 { return ImGui::GetWindowPos(); } );
    m.def("GetWindowSize", []() -> ImVec2 { return ImGui::GetWindowSize(); } );
    m.def("GetWindowWidth", []() -> float { return ImGui::GetWindowWidth(); } );
    m.def("GetWindowHeight", []() -> float { return ImGui::GetWindowHeight(); } );
    m.def("SetNextWindowPos", [](const ImVec2 & _pos, ImGuiCond _cond, const ImVec2 & _pivot) -> void { ImGui::SetNextWindowPos(_pos, _cond, _pivot); } , nb::arg("_pos"), nb::arg("_cond")=0, nb::arg("_pivot")=ImVec2 ( 0 , 0 ));
    m.def("SetNextWindowSize", [](const ImVec2 & _size, ImGuiCond _cond) -> void { ImGui::SetNextWindowSize(_size, _cond); } , nb::arg("_size"), nb::arg("_cond")=0);
    m.def("SetNextWindowContentSize", [](const ImVec2 & _size) -> void { ImGui::SetNextWindowContentSize(_size); } , nb::arg("_size"));
    m.def("SetNextWindowCollapsed", [](bool _collapsed, ImGuiCond _cond) -> void { ImGui::SetNextWindowCollapsed(_collapsed, _cond); } , nb::arg("_collapsed"), nb::arg("_cond")=0);
    m.def("SetNextWindowFocus", []() -> void { ImGui::SetNextWindowFocus(); } );
    m.def("SetNextWindowBgAlpha", [](float _alpha) -> void { ImGui::SetNextWindowBgAlpha(_alpha); } , nb::arg("_alpha"));
    m.def("SetWindowPos", [](const ImVec2 & _pos, ImGuiCond _cond) -> void { ImGui::SetWindowPos(_pos, _cond); } , nb::arg("_pos"), nb::arg("_cond")=0);
    m.def("SetWindowSize", [](const ImVec2 & _size, ImGuiCond _cond) -> void { ImGui::SetWindowSize(_size, _cond); } , nb::arg("_size"), nb::arg("_cond")=0);
    m.def("SetWindowCollapsed", [](bool _collapsed, ImGuiCond _cond) -> void { ImGui::SetWindowCollapsed(_collapsed, _cond); } , nb::arg("_collapsed"), nb::arg("_cond")=0);
    m.def("SetWindowFocus", []() -> void { ImGui::SetWindowFocus(); } );
    m.def("SetWindowFontScale", [](float _scale) -> void { ImGui::SetWindowFontScale(_scale); } , nb::arg("_scale"));
    m.def("GetContentRegionAvail", []() -> ImVec2 { return ImGui::GetContentRegionAvail(); } );
    m.def("GetContentRegionMax", []() -> ImVec2 { return ImGui::GetContentRegionMax(); } );
    m.def("GetWindowContentRegionMin", []() -> ImVec2 { return ImGui::GetWindowContentRegionMin(); } );
    m.def("GetWindowContentRegionMax", []() -> ImVec2 { return ImGui::GetWindowContentRegionMax(); } );
    m.def("GetScrollX", []() -> float { return ImGui::GetScrollX(); } );
    m.def("GetScrollY", []() -> float { return ImGui::GetScrollY(); } );
    m.def("SetScrollX", [](float _scroll_x) -> void { ImGui::SetScrollX(_scroll_x); } , nb::arg("_scroll_x"));
    m.def("SetScrollY", [](float _scroll_y) -> void { ImGui::SetScrollY(_scroll_y); } , nb::arg("_scroll_y"));
    m.def("GetScrollMaxX", []() -> float { return ImGui::GetScrollMaxX(); } );
    m.def("GetScrollMaxY", []() -> float { return ImGui::GetScrollMaxY(); } );
    m.def("SetScrollHereX", [](float _center_x_ratio) -> void { ImGui::SetScrollHereX(_center_x_ratio); } , nb::arg("_center_x_ratio")=0.5f);
    m.def("SetScrollHereY", [](float _center_y_ratio) -> void { ImGui::SetScrollHereY(_center_y_ratio); } , nb::arg("_center_y_ratio")=0.5f);
    m.def("SetScrollFromPosX", [](float _local_x, float _center_x_ratio) -> void { ImGui::SetScrollFromPosX(_local_x, _center_x_ratio); } , nb::arg("_local_x"), nb::arg("_center_x_ratio")=0.5f);
    m.def("SetScrollFromPosY", [](float _local_y, float _center_y_ratio) -> void { ImGui::SetScrollFromPosY(_local_y, _center_y_ratio); } , nb::arg("_local_y"), nb::arg("_center_y_ratio")=0.5f);
    m.def("PopFont", []() -> void { ImGui::PopFont(); } );
    m.def("PushStyleColor", [](ImGuiCol _idx, ImU32 _col) -> void { ImGui::PushStyleColor(_idx, _col); } , nb::arg("_idx"), nb::arg("_col"));
    m.def("PopStyleColor", [](int _count) -> void { ImGui::PopStyleColor(_count); } , nb::arg("_count")=1);
    m.def("PushStyleVar", [](ImGuiStyleVar _idx, float _val) -> void { ImGui::PushStyleVar(_idx, _val); } , nb::arg("_idx"), nb::arg("_val"));
    m.def("PopStyleVar", [](int _count) -> void { ImGui::PopStyleVar(_count); } , nb::arg("_count")=1);
    m.def("PushAllowKeyboardFocus", [](bool _allow_keyboard_focus) -> void { ImGui::PushAllowKeyboardFocus(_allow_keyboard_focus); } , nb::arg("_allow_keyboard_focus"));
    m.def("PopAllowKeyboardFocus", []() -> void { ImGui::PopAllowKeyboardFocus(); } );
    m.def("PushButtonRepeat", [](bool _repeat) -> void { ImGui::PushButtonRepeat(_repeat); } , nb::arg("_repeat"));
    m.def("PopButtonRepeat", []() -> void { ImGui::PopButtonRepeat(); } );
    m.def("PushItemWidth", [](float _item_width) -> void { ImGui::PushItemWidth(_item_width); } , nb::arg("_item_width"));
    m.def("PopItemWidth", []() -> void { ImGui::PopItemWidth(); } );
    m.def("SetNextItemWidth", [](float _item_width) -> void { ImGui::SetNextItemWidth(_item_width); } , nb::arg("_item_width"));
    m.def("CalcItemWidth", []() -> float { return ImGui::CalcItemWidth(); } );
    m.def("PushTextWrapPos", [](float _wrap_local_pos_x) -> void { ImGui::PushTextWrapPos(_wrap_local_pos_x); } , nb::arg("_wrap_local_pos_x")=0.0f);
    m.def("PopTextWrapPos", []() -> void { ImGui::PopTextWrapPos(); } );
    m.def("GetFont", []() -> ImFont * { return ImGui::GetFont(); } );
    m.def("GetFontSize", []() -> float { return ImGui::GetFontSize(); } );
    m.def("GetFontTexUvWhitePixel", []() -> ImVec2 { return ImGui::GetFontTexUvWhitePixel(); } );
    m.def("GetColorU32", [](ImGuiCol _idx, float _alpha_mul) -> ImU32 { return ImGui::GetColorU32(_idx, _alpha_mul); } , nb::arg("_idx"), nb::arg("_alpha_mul")=1.0f);
    m.def("GetStyleColorVec4", [](ImGuiCol _idx) -> const ImVec4 & { return ImGui::GetStyleColorVec4(_idx); } , nb::arg("_idx"));
    m.def("Separator", []() -> void { ImGui::Separator(); } );
    m.def("SameLine", [](float _offset_from_start_x, float _spacing) -> void { ImGui::SameLine(_offset_from_start_x, _spacing); } , nb::arg("_offset_from_start_x")=0.0f, nb::arg("_spacing")=- 1.0f);
    m.def("NewLine", []() -> void { ImGui::NewLine(); } );
    m.def("Spacing", []() -> void { ImGui::Spacing(); } );
    m.def("Dummy", [](const ImVec2 & _size) -> void { ImGui::Dummy(_size); } , nb::arg("_size"));
    m.def("Indent", [](float _indent_w) -> void { ImGui::Indent(_indent_w); } , nb::arg("_indent_w")=0.0f);
    m.def("Unindent", [](float _indent_w) -> void { ImGui::Unindent(_indent_w); } , nb::arg("_indent_w")=0.0f);
    m.def("BeginGroup", []() -> void { ImGui::BeginGroup(); } );
    m.def("EndGroup", []() -> void { ImGui::EndGroup(); } );
    m.def("GetCursorPos", []() -> ImVec2 { return ImGui::GetCursorPos(); } );
    m.def("GetCursorPosX", []() -> float { return ImGui::GetCursorPosX(); } );
    m.def("GetCursorPosY", []() -> float { return ImGui::GetCursorPosY(); } );
    m.def("SetCursorPos", [](const ImVec2 & _local_pos) -> void { ImGui::SetCursorPos(_local_pos); } , nb::arg("_local_pos"));
    m.def("SetCursorPosX", [](float _local_x) -> void { ImGui::SetCursorPosX(_local_x); } , nb::arg("_local_x"));
    m.def("SetCursorPosY", [](float _local_y) -> void { ImGui::SetCursorPosY(_local_y); } , nb::arg("_local_y"));
    m.def("GetCursorStartPos", []() -> ImVec2 { return ImGui::GetCursorStartPos(); } );
    m.def("GetCursorScreenPos", []() -> ImVec2 { return ImGui::GetCursorScreenPos(); } );
    m.def("SetCursorScreenPos", [](const ImVec2 & _pos) -> void { ImGui::SetCursorScreenPos(_pos); } , nb::arg("_pos"));
    m.def("AlignTextToFramePadding", []() -> void { ImGui::AlignTextToFramePadding(); } );
    m.def("GetTextLineHeight", []() -> float { return ImGui::GetTextLineHeight(); } );
    m.def("GetTextLineHeightWithSpacing", []() -> float { return ImGui::GetTextLineHeightWithSpacing(); } );
    m.def("GetFrameHeight", []() -> float { return ImGui::GetFrameHeight(); } );
    m.def("GetFrameHeightWithSpacing", []() -> float { return ImGui::GetFrameHeightWithSpacing(); } );
    m.def("PushID", [](nb::str & _str_id) -> void { ImGui::PushID(_str_id.c_str()); } , nb::arg("_str_id"));
    m.def("PopID", []() -> void { ImGui::PopID(); } );
    m.def("GetID", [](nb::str & _str_id) -> ImGuiID { return ImGui::GetID(_str_id.c_str()); } , nb::arg("_str_id"));
    m.def("TextUnformatted", [](nb::str & _text, nb::str & _text_end) -> void { ImGui::TextUnformatted(_text.c_str(), _text_end.c_str()); } , nb::arg("_text"), nb::arg("_text_end")=NULL);
    m.def("Text", [](nb::str & _fmt) -> void { ImGui::Text(_fmt.c_str()); } , nb::arg("_fmt"));
    m.def("TextColored", [](const ImVec4 & _col, nb::str & _fmt) -> void { ImGui::TextColored(_col, _fmt.c_str()); } , nb::arg("_col"), nb::arg("_fmt"));
    m.def("TextDisabled", [](nb::str & _fmt) -> void { ImGui::TextDisabled(_fmt.c_str()); } , nb::arg("_fmt"));
    m.def("TextWrapped", [](nb::str & _fmt) -> void { ImGui::TextWrapped(_fmt.c_str()); } , nb::arg("_fmt"));
    m.def("LabelText", [](nb::str & _label, nb::str & _fmt) -> void { ImGui::LabelText(_label.c_str(), _fmt.c_str()); } , nb::arg("_label"), nb::arg("_fmt"));
    m.def("BulletText", [](nb::str & _fmt) -> void { ImGui::BulletText(_fmt.c_str()); } , nb::arg("_fmt"));
    m.def("Button", [](nb::str & _label, const ImVec2 & _size) -> bool { return ImGui::Button(_label.c_str(), _size); } , nb::arg("_label"), nb::arg("_size")=ImVec2 ( 0 , 0 ));
    m.def("SmallButton", [](nb::str & _label) -> bool { return ImGui::SmallButton(_label.c_str()); } , nb::arg("_label"));
    m.def("InvisibleButton", [](nb::str & _str_id, const ImVec2 & _size, ImGuiButtonFlags _flags) -> bool { return ImGui::InvisibleButton(_str_id.c_str(), _size, _flags); } , nb::arg("_str_id"), nb::arg("_size"), nb::arg("_flags")=0);
    m.def("ArrowButton", [](nb::str & _str_id, ImGuiDir _dir) -> bool { return ImGui::ArrowButton(_str_id.c_str(), _dir); } , nb::arg("_str_id"), nb::arg("_dir"));
    m.def("CheckboxFlags", [](nb::str & _label, int * _flags, int _flags_value) -> bool { return ImGui::CheckboxFlags(_label.c_str(), _flags, _flags_value); } , nb::arg("_label"), nb::arg("_flags"), nb::arg("_flags_value"));
    m.def("RadioButton", [](nb::str & _label, bool _active) -> bool { return ImGui::RadioButton(_label.c_str(), _active); } , nb::arg("_label"), nb::arg("_active"));
    m.def("ProgressBar", [](float _fraction, const ImVec2 & _size_arg, nb::str & _overlay) -> void { ImGui::ProgressBar(_fraction, _size_arg, _overlay.c_str()); } , nb::arg("_fraction"), nb::arg("_size_arg")=ImVec2 ( - FLT_MIN , 0 ), nb::arg("_overlay")=NULL);
    m.def("Bullet", []() -> void { ImGui::Bullet(); } );
    m.def("BeginCombo", [](nb::str & _label, nb::str & _preview_value, ImGuiComboFlags _flags) -> bool { return ImGui::BeginCombo(_label.c_str(), _preview_value.c_str(), _flags); } , nb::arg("_label"), nb::arg("_preview_value"), nb::arg("_flags")=0);
    m.def("EndCombo", []() -> void { ImGui::EndCombo(); } );
    m.def("DragFloat", [](nb::str & _label, float * _v, float _v_speed, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::DragFloat(_label.c_str(), _v, _v_speed, _v_min, _v_max, _format.c_str(), _flags); } , nb::arg("_label"), nb::arg("_v"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0.0f, nb::arg("_v_max")=0.0f, nb::arg("_format")="%.3f", nb::arg("_flags")=0);
    m.def("DragFloatRange2", [](nb::str & _label, float * _v_current_min, float * _v_current_max, float _v_speed, float _v_min, float _v_max, nb::str & _format, nb::str & _format_max, ImGuiSliderFlags _flags) -> bool { return ImGui::DragFloatRange2(_label.c_str(), _v_current_min, _v_current_max, _v_speed, _v_min, _v_max, _format.c_str(), _format_max.c_str(), _flags); } , nb::arg("_label"), nb::arg("_v_current_min"), nb::arg("_v_current_max"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0.0f, nb::arg("_v_max")=0.0f, nb::arg("_format")="%.3f", nb::arg("_format_max")=NULL, nb::arg("_flags")=0);
    m.def("DragInt", [](nb::str & _label, int * _v, float _v_speed, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::DragInt(_label.c_str(), _v, _v_speed, _v_min, _v_max, _format.c_str(), _flags); } , nb::arg("_label"), nb::arg("_v"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0, nb::arg("_v_max")=0, nb::arg("_format")="%d", nb::arg("_flags")=0);
    m.def("DragIntRange2", [](nb::str & _label, int * _v_current_min, int * _v_current_max, float _v_speed, int _v_min, int _v_max, nb::str & _format, nb::str & _format_max, ImGuiSliderFlags _flags) -> bool { return ImGui::DragIntRange2(_label.c_str(), _v_current_min, _v_current_max, _v_speed, _v_min, _v_max, _format.c_str(), _format_max.c_str(), _flags); } , nb::arg("_label"), nb::arg("_v_current_min"), nb::arg("_v_current_max"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0, nb::arg("_v_max")=0, nb::arg("_format")="%d", nb::arg("_format_max")=NULL, nb::arg("_flags")=0);
    m.def("SliderAngle", [](nb::str & _label, float * _v_rad, float _v_degrees_min, float _v_degrees_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::SliderAngle(_label.c_str(), _v_rad, _v_degrees_min, _v_degrees_max, _format.c_str(), _flags); } , nb::arg("_label"), nb::arg("_v_rad"), nb::arg("_v_degrees_min")=- 360.0f, nb::arg("_v_degrees_max")=+ 360.0f, nb::arg("_format")="%.0f deg", nb::arg("_flags")=0);
    m.def("SliderInt", [](nb::str & _label, int * _v, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::SliderInt(_label.c_str(), _v, _v_min, _v_max, _format.c_str(), _flags); } , nb::arg("_label"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%d", nb::arg("_flags")=0);
    m.def("VSliderFloat", [](nb::str & _label, const ImVec2 & _size, float * _v, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::VSliderFloat(_label.c_str(), _size, _v, _v_min, _v_max, _format.c_str(), _flags); } , nb::arg("_label"), nb::arg("_size"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%.3f", nb::arg("_flags")=0);
    m.def("VSliderInt", [](nb::str & _label, const ImVec2 & _size, int * _v, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::VSliderInt(_label.c_str(), _size, _v, _v_min, _v_max, _format.c_str(), _flags); } , nb::arg("_label"), nb::arg("_size"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%d", nb::arg("_flags")=0);
    m.def("InputFloat", [](nb::str & _label, float * _v, float _step, float _step_fast, nb::str & _format, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputFloat(_label.c_str(), _v, _step, _step_fast, _format.c_str(), _flags); } , nb::arg("_label"), nb::arg("_v"), nb::arg("_step")=0.0f, nb::arg("_step_fast")=0.0f, nb::arg("_format")="%.3f", nb::arg("_flags")=0);
    m.def("InputInt", [](nb::str & _label, int * _v, int _step, int _step_fast, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputInt(_label.c_str(), _v, _step, _step_fast, _flags); } , nb::arg("_label"), nb::arg("_v"), nb::arg("_step")=1, nb::arg("_step_fast")=100, nb::arg("_flags")=0);
    m.def("InputDouble", [](nb::str & _label, double * _v, double _step, double _step_fast, nb::str & _format, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputDouble(_label.c_str(), _v, _step, _step_fast, _format.c_str(), _flags); } , nb::arg("_label"), nb::arg("_v"), nb::arg("_step")=0.0, nb::arg("_step_fast")=0.0, nb::arg("_format")="%.6f", nb::arg("_flags")=0);
    m.def("ColorButton", [](nb::str & _desc_id, const ImVec4 & _col, ImGuiColorEditFlags _flags, const ImVec2 & _size) -> bool { return ImGui::ColorButton(_desc_id.c_str(), _col, _flags, _size); } , nb::arg("_desc_id"), nb::arg("_col"), nb::arg("_flags")=0, nb::arg("_size")=ImVec2 ( 0 , 0 ));
    m.def("SetColorEditOptions", [](ImGuiColorEditFlags _flags) -> void { ImGui::SetColorEditOptions(_flags); } , nb::arg("_flags"));
    m.def("TreeNode", [](nb::str & _label) -> bool { return ImGui::TreeNode(_label.c_str()); } , nb::arg("_label"));
    m.def("TreeNodeEx", [](nb::str & _label, ImGuiTreeNodeFlags _flags) -> bool { return ImGui::TreeNodeEx(_label.c_str(), _flags); } , nb::arg("_label"), nb::arg("_flags")=0);
    m.def("TreePush", [](nb::str & _str_id) -> void { ImGui::TreePush(_str_id.c_str()); } , nb::arg("_str_id"));
    m.def("TreePop", []() -> void { ImGui::TreePop(); } );
    m.def("GetTreeNodeToLabelSpacing", []() -> float { return ImGui::GetTreeNodeToLabelSpacing(); } );
    m.def("CollapsingHeader", [](nb::str & _label, ImGuiTreeNodeFlags _flags) -> bool { return ImGui::CollapsingHeader(_label.c_str(), _flags); } , nb::arg("_label"), nb::arg("_flags")=0);
    m.def("SetNextItemOpen", [](bool _is_open, ImGuiCond _cond) -> void { ImGui::SetNextItemOpen(_is_open, _cond); } , nb::arg("_is_open"), nb::arg("_cond")=0);
    m.def("Selectable", [](nb::str & _label, bool _selected, ImGuiSelectableFlags _flags, const ImVec2 & _size) -> bool { return ImGui::Selectable(_label.c_str(), _selected, _flags, _size); } , nb::arg("_label"), nb::arg("_selected")=false, nb::arg("_flags")=0, nb::arg("_size")=ImVec2 ( 0 , 0 ));
    m.def("BeginListBox", [](nb::str & _label, const ImVec2 & _size) -> bool { return ImGui::BeginListBox(_label.c_str(), _size); } , nb::arg("_label"), nb::arg("_size")=ImVec2 ( 0 , 0 ));
    m.def("EndListBox", []() -> void { ImGui::EndListBox(); } );
    m.def("PlotLines", [](nb::str & _label, const float * _values, int _values_count, int _values_offset, nb::str & _overlay_text, float _scale_min, float _scale_max, ImVec2 _graph_size, int _stride) -> void { ImGui::PlotLines(_label.c_str(), _values, _values_count, _values_offset, _overlay_text.c_str(), _scale_min, _scale_max, _graph_size, _stride); } , nb::arg("_label"), nb::arg("_values"), nb::arg("_values_count"), nb::arg("_values_offset")=0, nb::arg("_overlay_text")=NULL, nb::arg("_scale_min")=FLT_MAX, nb::arg("_scale_max")=FLT_MAX, nb::arg("_graph_size")=ImVec2 ( 0 , 0 ), nb::arg("_stride")=sizeof ( float ));
    m.def("PlotHistogram", [](nb::str & _label, const float * _values, int _values_count, int _values_offset, nb::str & _overlay_text, float _scale_min, float _scale_max, ImVec2 _graph_size, int _stride) -> void { ImGui::PlotHistogram(_label.c_str(), _values, _values_count, _values_offset, _overlay_text.c_str(), _scale_min, _scale_max, _graph_size, _stride); } , nb::arg("_label"), nb::arg("_values"), nb::arg("_values_count"), nb::arg("_values_offset")=0, nb::arg("_overlay_text")=NULL, nb::arg("_scale_min")=FLT_MAX, nb::arg("_scale_max")=FLT_MAX, nb::arg("_graph_size")=ImVec2 ( 0 , 0 ), nb::arg("_stride")=sizeof ( float ));
    m.def("Value", [](nb::str & _prefix, bool _b) -> void { ImGui::Value(_prefix.c_str(), _b); } , nb::arg("_prefix"), nb::arg("_b"));
    m.def("BeginMenuBar", []() -> bool { return ImGui::BeginMenuBar(); } );
    m.def("EndMenuBar", []() -> void { ImGui::EndMenuBar(); } );
    m.def("BeginMainMenuBar", []() -> bool { return ImGui::BeginMainMenuBar(); } );
    m.def("EndMainMenuBar", []() -> void { ImGui::EndMainMenuBar(); } );
    m.def("BeginMenu", [](nb::str & _label, bool _enabled) -> bool { return ImGui::BeginMenu(_label.c_str(), _enabled); } , nb::arg("_label"), nb::arg("_enabled")=true);
    m.def("EndMenu", []() -> void { ImGui::EndMenu(); } );
    m.def("MenuItem", [](nb::str & _label, nb::str & _shortcut, bool _selected, bool _enabled) -> bool { return ImGui::MenuItem(_label.c_str(), _shortcut.c_str(), _selected, _enabled); } , nb::arg("_label"), nb::arg("_shortcut")=NULL, nb::arg("_selected")=false, nb::arg("_enabled")=true);
    m.def("BeginTooltip", []() -> void { ImGui::BeginTooltip(); } );
    m.def("EndTooltip", []() -> void { ImGui::EndTooltip(); } );
    m.def("SetTooltip", [](nb::str & _fmt) -> void { ImGui::SetTooltip(_fmt.c_str()); } , nb::arg("_fmt"));
    m.def("BeginPopup", [](nb::str & _str_id, ImGuiWindowFlags _flags) -> bool { return ImGui::BeginPopup(_str_id.c_str(), _flags); } , nb::arg("_str_id"), nb::arg("_flags")=0);
    m.def("BeginPopupModal", [](nb::str & _name, bool * _p_open, ImGuiWindowFlags _flags) -> bool { return ImGui::BeginPopupModal(_name.c_str(), _p_open, _flags); } , nb::arg("_name"), nb::arg("_p_open")=NULL, nb::arg("_flags")=0);
    m.def("EndPopup", []() -> void { ImGui::EndPopup(); } );
    m.def("OpenPopup", [](nb::str & _str_id, ImGuiPopupFlags _popup_flags) -> void { ImGui::OpenPopup(_str_id.c_str(), _popup_flags); } , nb::arg("_str_id"), nb::arg("_popup_flags")=0);
    m.def("OpenPopupOnItemClick", [](nb::str & _str_id, ImGuiPopupFlags _popup_flags) -> void { ImGui::OpenPopupOnItemClick(_str_id.c_str(), _popup_flags); } , nb::arg("_str_id")=NULL, nb::arg("_popup_flags")=1);
    m.def("CloseCurrentPopup", []() -> void { ImGui::CloseCurrentPopup(); } );
    m.def("BeginPopupContextItem", [](nb::str & _str_id, ImGuiPopupFlags _popup_flags) -> bool { return ImGui::BeginPopupContextItem(_str_id.c_str(), _popup_flags); } , nb::arg("_str_id")=NULL, nb::arg("_popup_flags")=1);
    m.def("BeginPopupContextWindow", [](nb::str & _str_id, ImGuiPopupFlags _popup_flags) -> bool { return ImGui::BeginPopupContextWindow(_str_id.c_str(), _popup_flags); } , nb::arg("_str_id")=NULL, nb::arg("_popup_flags")=1);
    m.def("BeginPopupContextVoid", [](nb::str & _str_id, ImGuiPopupFlags _popup_flags) -> bool { return ImGui::BeginPopupContextVoid(_str_id.c_str(), _popup_flags); } , nb::arg("_str_id")=NULL, nb::arg("_popup_flags")=1);
    m.def("IsPopupOpen", [](nb::str & _str_id, ImGuiPopupFlags _flags) -> bool { return ImGui::IsPopupOpen(_str_id.c_str(), _flags); } , nb::arg("_str_id"), nb::arg("_flags")=0);
    m.def("BeginTable", [](nb::str & _str_id, int _column, ImGuiTableFlags _flags, const ImVec2 & _outer_size, float _inner_width) -> bool { return ImGui::BeginTable(_str_id.c_str(), _column, _flags, _outer_size, _inner_width); } , nb::arg("_str_id"), nb::arg("_column"), nb::arg("_flags")=0, nb::arg("_outer_size")=ImVec2 ( 0.0f , 0.0f ), nb::arg("_inner_width")=0.0f);
    m.def("EndTable", []() -> void { ImGui::EndTable(); } );
    m.def("TableNextRow", [](ImGuiTableRowFlags _row_flags, float _min_row_height) -> void { ImGui::TableNextRow(_row_flags, _min_row_height); } , nb::arg("_row_flags")=0, nb::arg("_min_row_height")=0.0f);
    m.def("TableNextColumn", []() -> bool { return ImGui::TableNextColumn(); } );
    m.def("TableSetColumnIndex", [](int _column_n) -> bool { return ImGui::TableSetColumnIndex(_column_n); } , nb::arg("_column_n"));
    m.def("TableSetupColumn", [](nb::str & _label, ImGuiTableColumnFlags _flags, float _init_width_or_weight, ImGuiID _user_id) -> void { ImGui::TableSetupColumn(_label.c_str(), _flags, _init_width_or_weight, _user_id); } , nb::arg("_label"), nb::arg("_flags")=0, nb::arg("_init_width_or_weight")=0.0f, nb::arg("_user_id")=0);
    m.def("TableSetupScrollFreeze", [](int _cols, int _rows) -> void { ImGui::TableSetupScrollFreeze(_cols, _rows); } , nb::arg("_cols"), nb::arg("_rows"));
    m.def("TableHeadersRow", []() -> void { ImGui::TableHeadersRow(); } );
    m.def("TableHeader", [](nb::str & _label) -> void { ImGui::TableHeader(_label.c_str()); } , nb::arg("_label"));
    m.def("TableGetSortSpecs", []() -> ImGuiTableSortSpecs * { return ImGui::TableGetSortSpecs(); } );
    m.def("TableGetColumnCount", []() -> int { return ImGui::TableGetColumnCount(); } );
    m.def("TableGetColumnIndex", []() -> int { return ImGui::TableGetColumnIndex(); } );
    m.def("TableGetRowIndex", []() -> int { return ImGui::TableGetRowIndex(); } );
    m.def("TableGetColumnName", [](int _column_n) -> const char * { return ImGui::TableGetColumnName(_column_n); } , nb::arg("_column_n")=- 1);
    m.def("TableGetColumnFlags", [](int _column_n) -> ImGuiTableColumnFlags { return ImGui::TableGetColumnFlags(_column_n); } , nb::arg("_column_n")=- 1);
    m.def("TableSetColumnEnabled", [](int _column_n, bool _v) -> void { ImGui::TableSetColumnEnabled(_column_n, _v); } , nb::arg("_column_n"), nb::arg("_v"));
    m.def("TableSetBgColor", [](ImGuiTableBgTarget _target, ImU32 _color, int _column_n) -> void { ImGui::TableSetBgColor(_target, _color, _column_n); } , nb::arg("_target"), nb::arg("_color"), nb::arg("_column_n")=- 1);
    m.def("Columns", [](int _count, nb::str & _id, bool _border) -> void { ImGui::Columns(_count, _id.c_str(), _border); } , nb::arg("_count")=1, nb::arg("_id")=NULL, nb::arg("_border")=true);
    m.def("NextColumn", []() -> void { ImGui::NextColumn(); } );
    m.def("GetColumnIndex", []() -> int { return ImGui::GetColumnIndex(); } );
    m.def("GetColumnWidth", [](int _column_index) -> float { return ImGui::GetColumnWidth(_column_index); } , nb::arg("_column_index")=- 1);
    m.def("SetColumnWidth", [](int _column_index, float _width) -> void { ImGui::SetColumnWidth(_column_index, _width); } , nb::arg("_column_index"), nb::arg("_width"));
    m.def("GetColumnOffset", [](int _column_index) -> float { return ImGui::GetColumnOffset(_column_index); } , nb::arg("_column_index")=- 1);
    m.def("SetColumnOffset", [](int _column_index, float _offset_x) -> void { ImGui::SetColumnOffset(_column_index, _offset_x); } , nb::arg("_column_index"), nb::arg("_offset_x"));
    m.def("GetColumnsCount", []() -> int { return ImGui::GetColumnsCount(); } );
    m.def("BeginTabBar", [](nb::str & _str_id, ImGuiTabBarFlags _flags) -> bool { return ImGui::BeginTabBar(_str_id.c_str(), _flags); } , nb::arg("_str_id"), nb::arg("_flags")=0);
    m.def("EndTabBar", []() -> void { ImGui::EndTabBar(); } );
    m.def("BeginTabItem", [](nb::str & _label, bool * _p_open, ImGuiTabItemFlags _flags) -> bool { return ImGui::BeginTabItem(_label.c_str(), _p_open, _flags); } , nb::arg("_label"), nb::arg("_p_open")=NULL, nb::arg("_flags")=0);
    m.def("EndTabItem", []() -> void { ImGui::EndTabItem(); } );
    m.def("TabItemButton", [](nb::str & _label, ImGuiTabItemFlags _flags) -> bool { return ImGui::TabItemButton(_label.c_str(), _flags); } , nb::arg("_label"), nb::arg("_flags")=0);
    m.def("SetTabItemClosed", [](nb::str & _tab_or_docked_window_label) -> void { ImGui::SetTabItemClosed(_tab_or_docked_window_label.c_str()); } , nb::arg("_tab_or_docked_window_label"));
    m.def("LogToTTY", [](int _auto_open_depth) -> void { ImGui::LogToTTY(_auto_open_depth); } , nb::arg("_auto_open_depth")=- 1);
    m.def("LogToFile", [](int _auto_open_depth, nb::str & _filename) -> void { ImGui::LogToFile(_auto_open_depth, _filename.c_str()); } , nb::arg("_auto_open_depth")=- 1, nb::arg("_filename")=NULL);
    m.def("LogToClipboard", [](int _auto_open_depth) -> void { ImGui::LogToClipboard(_auto_open_depth); } , nb::arg("_auto_open_depth")=- 1);
    m.def("LogFinish", []() -> void { ImGui::LogFinish(); } );
    m.def("LogButtons", []() -> void { ImGui::LogButtons(); } );
    m.def("LogText", [](nb::str & _fmt) -> void { ImGui::LogText(_fmt.c_str()); } , nb::arg("_fmt"));
    m.def("BeginDragDropSource", [](ImGuiDragDropFlags _flags) -> bool { return ImGui::BeginDragDropSource(_flags); } , nb::arg("_flags")=0);
    m.def("EndDragDropSource", []() -> void { ImGui::EndDragDropSource(); } );
    m.def("BeginDragDropTarget", []() -> bool { return ImGui::BeginDragDropTarget(); } );
    m.def("AcceptDragDropPayload", [](nb::str & _type, ImGuiDragDropFlags _flags) -> const ImGuiPayload * { return ImGui::AcceptDragDropPayload(_type.c_str(), _flags); } , nb::arg("_type"), nb::arg("_flags")=0);
    m.def("EndDragDropTarget", []() -> void { ImGui::EndDragDropTarget(); } );
    m.def("GetDragDropPayload", []() -> const ImGuiPayload * { return ImGui::GetDragDropPayload(); } );
    m.def("BeginDisabled", [](bool _disabled) -> void { ImGui::BeginDisabled(_disabled); } , nb::arg("_disabled")=true);
    m.def("EndDisabled", []() -> void { ImGui::EndDisabled(); } );
    m.def("PushClipRect", [](const ImVec2 & _clip_rect_min, const ImVec2 & _clip_rect_max, bool _intersect_with_current_clip_rect) -> void { ImGui::PushClipRect(_clip_rect_min, _clip_rect_max, _intersect_with_current_clip_rect); } , nb::arg("_clip_rect_min"), nb::arg("_clip_rect_max"), nb::arg("_intersect_with_current_clip_rect"));
    m.def("PopClipRect", []() -> void { ImGui::PopClipRect(); } );
    m.def("SetItemDefaultFocus", []() -> void { ImGui::SetItemDefaultFocus(); } );
    m.def("SetKeyboardFocusHere", [](int _offset) -> void { ImGui::SetKeyboardFocusHere(_offset); } , nb::arg("_offset")=0);
    m.def("IsItemHovered", [](ImGuiHoveredFlags _flags) -> bool { return ImGui::IsItemHovered(_flags); } , nb::arg("_flags")=0);
    m.def("IsItemActive", []() -> bool { return ImGui::IsItemActive(); } );
    m.def("IsItemFocused", []() -> bool { return ImGui::IsItemFocused(); } );
    m.def("IsItemClicked", [](ImGuiMouseButton _mouse_button) -> bool { return ImGui::IsItemClicked(_mouse_button); } , nb::arg("_mouse_button")=0);
    m.def("IsItemVisible", []() -> bool { return ImGui::IsItemVisible(); } );
    m.def("IsItemEdited", []() -> bool { return ImGui::IsItemEdited(); } );
    m.def("IsItemActivated", []() -> bool { return ImGui::IsItemActivated(); } );
    m.def("IsItemDeactivated", []() -> bool { return ImGui::IsItemDeactivated(); } );
    m.def("IsItemDeactivatedAfterEdit", []() -> bool { return ImGui::IsItemDeactivatedAfterEdit(); } );
    m.def("IsItemToggledOpen", []() -> bool { return ImGui::IsItemToggledOpen(); } );
    m.def("IsAnyItemHovered", []() -> bool { return ImGui::IsAnyItemHovered(); } );
    m.def("IsAnyItemActive", []() -> bool { return ImGui::IsAnyItemActive(); } );
    m.def("IsAnyItemFocused", []() -> bool { return ImGui::IsAnyItemFocused(); } );
    m.def("GetItemRectMin", []() -> ImVec2 { return ImGui::GetItemRectMin(); } );
    m.def("GetItemRectMax", []() -> ImVec2 { return ImGui::GetItemRectMax(); } );
    m.def("GetItemRectSize", []() -> ImVec2 { return ImGui::GetItemRectSize(); } );
    m.def("SetItemAllowOverlap", []() -> void { ImGui::SetItemAllowOverlap(); } );
    m.def("GetMainViewport", []() -> ImGuiViewport * { return ImGui::GetMainViewport(); } );
    m.def("GetBackgroundDrawList", []() -> ImDrawList * { return ImGui::GetBackgroundDrawList(); } );
    m.def("GetForegroundDrawList", []() -> ImDrawList * { return ImGui::GetForegroundDrawList(); } );
    m.def("IsRectVisible", [](const ImVec2 & _size) -> bool { return ImGui::IsRectVisible(_size); } , nb::arg("_size"));
    m.def("GetTime", []() -> double { return ImGui::GetTime(); } );
    m.def("GetFrameCount", []() -> int { return ImGui::GetFrameCount(); } );
    m.def("GetDrawListSharedData", []() -> ImDrawListSharedData * { return ImGui::GetDrawListSharedData(); } );
    m.def("GetStyleColorName", [](ImGuiCol _idx) -> const char * { return ImGui::GetStyleColorName(_idx); } , nb::arg("_idx"));
    m.def("GetStateStorage", []() -> ImGuiStorage * { return ImGui::GetStateStorage(); } );
    m.def("BeginChildFrame", [](ImGuiID _id, const ImVec2 & _size, ImGuiWindowFlags _flags) -> bool { return ImGui::BeginChildFrame(_id, _size, _flags); } , nb::arg("_id"), nb::arg("_size"), nb::arg("_flags")=0);
    m.def("EndChildFrame", []() -> void { ImGui::EndChildFrame(); } );
    m.def("CalcTextSize", [](nb::str & _text, nb::str & _text_end, bool _hide_text_after_double_hash, float _wrap_width) -> ImVec2 { return ImGui::CalcTextSize(_text.c_str(), _text_end.c_str(), _hide_text_after_double_hash, _wrap_width); } , nb::arg("_text"), nb::arg("_text_end")=NULL, nb::arg("_hide_text_after_double_hash")=false, nb::arg("_wrap_width")=- 1.0f);
    m.def("ColorConvertU32ToFloat4", [](ImU32 _in) -> ImVec4 { return ImGui::ColorConvertU32ToFloat4(_in); } , nb::arg("_in"));
    m.def("ColorConvertFloat4ToU32", [](const ImVec4 & _in) -> ImU32 { return ImGui::ColorConvertFloat4ToU32(_in); } , nb::arg("_in"));
    m.def("ColorConvertRGBtoHSV", [](float _r, float _g, float _b, float & _out_h, float & _out_s, float & _out_v) -> void { ImGui::ColorConvertRGBtoHSV(_r, _g, _b, _out_h, _out_s, _out_v); } , nb::arg("_r"), nb::arg("_g"), nb::arg("_b"), nb::arg("_out_h"), nb::arg("_out_s"), nb::arg("_out_v"));
    m.def("ColorConvertHSVtoRGB", [](float _h, float _s, float _v, float & _out_r, float & _out_g, float & _out_b) -> void { ImGui::ColorConvertHSVtoRGB(_h, _s, _v, _out_r, _out_g, _out_b); } , nb::arg("_h"), nb::arg("_s"), nb::arg("_v"), nb::arg("_out_r"), nb::arg("_out_g"), nb::arg("_out_b"));
    m.def("IsKeyDown", [](ImGuiKey _key) -> bool { return ImGui::IsKeyDown(_key); } , nb::arg("_key"));
    m.def("IsKeyPressed", [](ImGuiKey _key, bool _repeat) -> bool { return ImGui::IsKeyPressed(_key, _repeat); } , nb::arg("_key"), nb::arg("_repeat")=true);
    m.def("IsKeyReleased", [](ImGuiKey _key) -> bool { return ImGui::IsKeyReleased(_key); } , nb::arg("_key"));
    m.def("GetKeyPressedAmount", [](ImGuiKey _key, float _repeat_delay, float _rate) -> int { return ImGui::GetKeyPressedAmount(_key, _repeat_delay, _rate); } , nb::arg("_key"), nb::arg("_repeat_delay"), nb::arg("_rate"));
    m.def("GetKeyName", [](ImGuiKey _key) -> const char * { return ImGui::GetKeyName(_key); } , nb::arg("_key"));
    m.def("CaptureKeyboardFromApp", [](bool _want_capture_keyboard_value) -> void { ImGui::CaptureKeyboardFromApp(_want_capture_keyboard_value); } , nb::arg("_want_capture_keyboard_value")=true);
    m.def("IsMouseDown", [](ImGuiMouseButton _button) -> bool { return ImGui::IsMouseDown(_button); } , nb::arg("_button"));
    m.def("IsMouseClicked", [](ImGuiMouseButton _button, bool _repeat) -> bool { return ImGui::IsMouseClicked(_button, _repeat); } , nb::arg("_button"), nb::arg("_repeat")=false);
    m.def("IsMouseReleased", [](ImGuiMouseButton _button) -> bool { return ImGui::IsMouseReleased(_button); } , nb::arg("_button"));
    m.def("IsMouseDoubleClicked", [](ImGuiMouseButton _button) -> bool { return ImGui::IsMouseDoubleClicked(_button); } , nb::arg("_button"));
    m.def("GetMouseClickedCount", [](ImGuiMouseButton _button) -> int { return ImGui::GetMouseClickedCount(_button); } , nb::arg("_button"));
    m.def("IsMouseHoveringRect", [](const ImVec2 & _r_min, const ImVec2 & _r_max, bool _clip) -> bool { return ImGui::IsMouseHoveringRect(_r_min, _r_max, _clip); } , nb::arg("_r_min"), nb::arg("_r_max"), nb::arg("_clip")=true);
    m.def("IsMousePosValid", [](const ImVec2 * _mouse_pos) -> bool { return ImGui::IsMousePosValid(_mouse_pos); } , nb::arg("_mouse_pos")=NULL);
    m.def("IsAnyMouseDown", []() -> bool { return ImGui::IsAnyMouseDown(); } );
    m.def("GetMousePos", []() -> ImVec2 { return ImGui::GetMousePos(); } );
    m.def("GetMousePosOnOpeningCurrentPopup", []() -> ImVec2 { return ImGui::GetMousePosOnOpeningCurrentPopup(); } );
    m.def("IsMouseDragging", [](ImGuiMouseButton _button, float _lock_threshold) -> bool { return ImGui::IsMouseDragging(_button, _lock_threshold); } , nb::arg("_button"), nb::arg("_lock_threshold")=- 1.0f);
    m.def("GetMouseDragDelta", [](ImGuiMouseButton _button, float _lock_threshold) -> ImVec2 { return ImGui::GetMouseDragDelta(_button, _lock_threshold); } , nb::arg("_button")=0, nb::arg("_lock_threshold")=- 1.0f);
    m.def("ResetMouseDragDelta", [](ImGuiMouseButton _button) -> void { ImGui::ResetMouseDragDelta(_button); } , nb::arg("_button")=0);
    m.def("GetMouseCursor", []() -> ImGuiMouseCursor { return ImGui::GetMouseCursor(); } );
    m.def("SetMouseCursor", [](ImGuiMouseCursor _cursor_type) -> void { ImGui::SetMouseCursor(_cursor_type); } , nb::arg("_cursor_type"));
    m.def("CaptureMouseFromApp", [](bool _want_capture_mouse_value) -> void { ImGui::CaptureMouseFromApp(_want_capture_mouse_value); } , nb::arg("_want_capture_mouse_value")=true);
    m.def("GetClipboardText", []() -> const char * { return ImGui::GetClipboardText(); } );
    m.def("SetClipboardText", [](nb::str & _text) -> void { ImGui::SetClipboardText(_text.c_str()); } , nb::arg("_text"));
    m.def("LoadIniSettingsFromDisk", [](nb::str & _ini_filename) -> void { ImGui::LoadIniSettingsFromDisk(_ini_filename.c_str()); } , nb::arg("_ini_filename"));
    m.def("LoadIniSettingsFromMemory", [](nb::str & _ini_data, size_t _ini_size) -> void { ImGui::LoadIniSettingsFromMemory(_ini_data.c_str(), _ini_size); } , nb::arg("_ini_data"), nb::arg("_ini_size")=0);
    m.def("SaveIniSettingsToDisk", [](nb::str & _ini_filename) -> void { ImGui::SaveIniSettingsToDisk(_ini_filename.c_str()); } , nb::arg("_ini_filename"));
    m.def("SaveIniSettingsToMemory", [](size_t * _out_ini_size) -> const char * { return ImGui::SaveIniSettingsToMemory(_out_ini_size); } , nb::arg("_out_ini_size")=NULL);
    m.def("GetKeyIndex", [](ImGuiKey _key) -> int { return ImGui::GetKeyIndex(_key); } , nb::arg("_key"));
    m.def("CalcListClipping", [](int _items_count, float _items_height, int * _out_items_display_start, int * _out_items_display_end) -> void { ImGui::CalcListClipping(_items_count, _items_height, _out_items_display_start, _out_items_display_end); } , nb::arg("_items_count"), nb::arg("_items_height"), nb::arg("_out_items_display_start"), nb::arg("_out_items_display_end"));
    m.def("ListBoxHeader", [](nb::str & _label, int _items_count, int _height_in_items) -> bool { return ImGui::ListBoxHeader(_label.c_str(), _items_count, _height_in_items); } , nb::arg("_label"), nb::arg("_items_count"), nb::arg("_height_in_items")=- 1);


    m.def("SliderFloat",
        [](nb::str & _label, nb::tensor<nb::numpy, float, nb::shape<1>> & _v, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool {
            return ImGui::SliderFloat(_label.c_str(), (float *)_v.data(), _v_min, _v_max, _format.c_str(), _flags);
        },
        nb::arg("_label"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%.3f", nb::arg("_flags")=0
    );

    m.def("SliderFloat2",
        [](nb::str & _label, nb::tensor<nb::numpy, float, nb::shape<2>> & _v, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool {
            bool ret = ImGui::SliderFloat2(_label.c_str(), (float *)_v.data(), _v_min, _v_max, _format.c_str(), _flags);
            return ret;
        },
        nb::arg("_label"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%.3f", nb::arg("_flags")=0,
        nb::rv_policy::automatic_reference
    );
    m.def("Begin", [](nb::str & _name, nb::tensor<nb::numpy, uint8_t, nb::shape<1>> & _p_open, ImGuiWindowFlags _flags) -> bool {
        return ImGui::Begin(_name.c_str(), (bool*)_p_open.data(), _flags);
    } , nb::arg("_name"), nb::arg("_p_open"), nb::arg("_flags")=0);
    // m.def("Checkbox", [](nb::str & _label,nb::tensor<nb::numpy, uint8_t, nb::shape<1>> & _v) -> bool {
    //     return ImGui::Checkbox(_label.c_str(), (bool*)_v.data());
    // } , nb::arg("_label"), nb::arg("_v"));

    m.def("Checkbox", [](nb::str & _label, DataHolder<bool> _v) -> bool {
        if (!_v) {
            return false;
        }
        return ImGui::Checkbox(_label.c_str(), (bool*)_v->data());
    } , nb::arg("_label"), nb::arg("_v").none());
}
