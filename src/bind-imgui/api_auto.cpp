#include "api.hpp"

namespace nb = nanobind;

void imgui_def_api_auto(nb::module_ & m) {

    m.def("destroy_context", [](ImGuiContext * _ctx) -> void { ImGui::DestroyContext(_ctx); }, nb::arg("_ctx").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("get_current_context", []() -> ImGuiContext * { return ImGui::GetCurrentContext(); }, nb::rv_policy::automatic_reference);
    m.def("set_current_context", [](ImGuiContext * _ctx) -> void { ImGui::SetCurrentContext(_ctx); }, nb::arg("_ctx"), nb::rv_policy::automatic_reference);
    m.def("get_io", []() -> ImGuiIO & { return ImGui::GetIO(); }, nb::rv_policy::automatic_reference);
    m.def("get_style", []() -> ImGuiStyle & { return ImGui::GetStyle(); }, nb::rv_policy::automatic_reference);
    m.def("new_frame", []() -> void { ImGui::NewFrame(); }, nb::rv_policy::automatic_reference);
    m.def("end_frame", []() -> void { ImGui::EndFrame(); }, nb::rv_policy::automatic_reference);
    m.def("render", []() -> void { ImGui::Render(); }, nb::rv_policy::automatic_reference);
    m.def("get_draw_data", []() -> ImDrawData * { return ImGui::GetDrawData(); }, nb::rv_policy::automatic_reference);
    m.def("show_demo_window", [](IMBIND_Data<bool> _p_open) -> void { ImGui::ShowDemoWindow((bool*)_p_open.value().data()); }, nb::arg("_p_open").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("show_metrics_window", [](IMBIND_Data<bool> _p_open) -> void { ImGui::ShowMetricsWindow((bool*)_p_open.value().data()); }, nb::arg("_p_open").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("show_stack_tool_window", [](IMBIND_Data<bool> _p_open) -> void { ImGui::ShowStackToolWindow((bool*)_p_open.value().data()); }, nb::arg("_p_open").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("show_about_window", [](IMBIND_Data<bool> _p_open) -> void { ImGui::ShowAboutWindow((bool*)_p_open.value().data()); }, nb::arg("_p_open").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("show_style_editor", [](ImGuiStyle * _ref) -> void { ImGui::ShowStyleEditor(_ref); }, nb::arg("_ref").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("show_style_selector", [](nb::str & _label) -> bool { return ImGui::ShowStyleSelector(_label.c_str()); }, nb::arg("_label"), nb::rv_policy::automatic_reference);
    m.def("show_font_selector", [](nb::str & _label) -> void { ImGui::ShowFontSelector(_label.c_str()); }, nb::arg("_label"), nb::rv_policy::automatic_reference);
    m.def("show_user_guide", []() -> void { ImGui::ShowUserGuide(); }, nb::rv_policy::automatic_reference);
    m.def("get_version", []() -> const char * { return ImGui::GetVersion(); }, nb::rv_policy::automatic_reference);
    m.def("style_colors_dark", [](ImGuiStyle * _dst) -> void { ImGui::StyleColorsDark(_dst); }, nb::arg("_dst").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("style_colors_light", [](ImGuiStyle * _dst) -> void { ImGui::StyleColorsLight(_dst); }, nb::arg("_dst").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("style_colors_classic", [](ImGuiStyle * _dst) -> void { ImGui::StyleColorsClassic(_dst); }, nb::arg("_dst").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("begin", [](nb::str & _name, IMBIND_Data<bool> _p_open, ImGuiWindowFlags _flags) -> bool { return ImGui::Begin(_name.c_str(), (bool*)_p_open.value().data(), _flags); }, nb::arg("_name"), nb::arg("_p_open").none()=nb::none(), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("end", []() -> void { ImGui::End(); }, nb::rv_policy::automatic_reference);
    m.def("begin_child", [](nb::str & _str_id, const ImVec2 & _size, bool _border, ImGuiWindowFlags _flags) -> bool { return ImGui::BeginChild(_str_id.c_str(), _size, _border, _flags); }, nb::arg("_str_id"), nb::arg("_size")=ImVec2(0,0), nb::arg("_border")=false, nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("end_child", []() -> void { ImGui::EndChild(); }, nb::rv_policy::automatic_reference);
    m.def("is_window_appearing", []() -> bool { return ImGui::IsWindowAppearing(); }, nb::rv_policy::automatic_reference);
    m.def("is_window_collapsed", []() -> bool { return ImGui::IsWindowCollapsed(); }, nb::rv_policy::automatic_reference);
    m.def("is_window_focused", [](ImGuiFocusedFlags _flags) -> bool { return ImGui::IsWindowFocused(_flags); }, nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("is_window_hovered", [](ImGuiHoveredFlags _flags) -> bool { return ImGui::IsWindowHovered(_flags); }, nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("get_window_draw_list", []() -> ImDrawList * { return ImGui::GetWindowDrawList(); }, nb::rv_policy::automatic_reference);
    m.def("get_window_pos", []() -> ImVec2 { return ImGui::GetWindowPos(); }, nb::rv_policy::automatic_reference);
    m.def("get_window_size", []() -> ImVec2 { return ImGui::GetWindowSize(); }, nb::rv_policy::automatic_reference);
    m.def("get_window_width", []() -> float { return ImGui::GetWindowWidth(); }, nb::rv_policy::automatic_reference);
    m.def("get_window_height", []() -> float { return ImGui::GetWindowHeight(); }, nb::rv_policy::automatic_reference);
    m.def("set_next_window_pos", [](const ImVec2 & _pos, ImGuiCond _cond, const ImVec2 & _pivot) -> void { ImGui::SetNextWindowPos(_pos, _cond, _pivot); }, nb::arg("_pos"), nb::arg("_cond")=0, nb::arg("_pivot")=ImVec2(0,0), nb::rv_policy::automatic_reference);
    m.def("set_next_window_size", [](const ImVec2 & _size, ImGuiCond _cond) -> void { ImGui::SetNextWindowSize(_size, _cond); }, nb::arg("_size"), nb::arg("_cond")=0, nb::rv_policy::automatic_reference);
    m.def("set_next_window_content_size", [](const ImVec2 & _size) -> void { ImGui::SetNextWindowContentSize(_size); }, nb::arg("_size"), nb::rv_policy::automatic_reference);
    m.def("set_next_window_collapsed", [](bool _collapsed, ImGuiCond _cond) -> void { ImGui::SetNextWindowCollapsed(_collapsed, _cond); }, nb::arg("_collapsed"), nb::arg("_cond")=0, nb::rv_policy::automatic_reference);
    m.def("set_next_window_focus", []() -> void { ImGui::SetNextWindowFocus(); }, nb::rv_policy::automatic_reference);
    m.def("set_next_window_bg_alpha", [](float _alpha) -> void { ImGui::SetNextWindowBgAlpha(_alpha); }, nb::arg("_alpha"), nb::rv_policy::automatic_reference);
    m.def("set_window_pos", [](const ImVec2 & _pos, ImGuiCond _cond) -> void { ImGui::SetWindowPos(_pos, _cond); }, nb::arg("_pos"), nb::arg("_cond")=0, nb::rv_policy::automatic_reference);
    m.def("set_window_size", [](const ImVec2 & _size, ImGuiCond _cond) -> void { ImGui::SetWindowSize(_size, _cond); }, nb::arg("_size"), nb::arg("_cond")=0, nb::rv_policy::automatic_reference);
    m.def("set_window_collapsed", [](bool _collapsed, ImGuiCond _cond) -> void { ImGui::SetWindowCollapsed(_collapsed, _cond); }, nb::arg("_collapsed"), nb::arg("_cond")=0, nb::rv_policy::automatic_reference);
    m.def("set_window_focus", []() -> void { ImGui::SetWindowFocus(); }, nb::rv_policy::automatic_reference);
    m.def("set_window_font_scale", [](float _scale) -> void { ImGui::SetWindowFontScale(_scale); }, nb::arg("_scale"), nb::rv_policy::automatic_reference);
    m.def("get_content_region_avail", []() -> ImVec2 { return ImGui::GetContentRegionAvail(); }, nb::rv_policy::automatic_reference);
    m.def("get_content_region_max", []() -> ImVec2 { return ImGui::GetContentRegionMax(); }, nb::rv_policy::automatic_reference);
    m.def("get_window_content_region_min", []() -> ImVec2 { return ImGui::GetWindowContentRegionMin(); }, nb::rv_policy::automatic_reference);
    m.def("get_window_content_region_max", []() -> ImVec2 { return ImGui::GetWindowContentRegionMax(); }, nb::rv_policy::automatic_reference);
    m.def("get_scroll_x", []() -> float { return ImGui::GetScrollX(); }, nb::rv_policy::automatic_reference);
    m.def("get_scroll_y", []() -> float { return ImGui::GetScrollY(); }, nb::rv_policy::automatic_reference);
    m.def("set_scroll_x", [](float _scroll_x) -> void { ImGui::SetScrollX(_scroll_x); }, nb::arg("_scroll_x"), nb::rv_policy::automatic_reference);
    m.def("set_scroll_y", [](float _scroll_y) -> void { ImGui::SetScrollY(_scroll_y); }, nb::arg("_scroll_y"), nb::rv_policy::automatic_reference);
    m.def("get_scroll_max_x", []() -> float { return ImGui::GetScrollMaxX(); }, nb::rv_policy::automatic_reference);
    m.def("get_scroll_max_y", []() -> float { return ImGui::GetScrollMaxY(); }, nb::rv_policy::automatic_reference);
    m.def("set_scroll_here_x", [](float _center_x_ratio) -> void { ImGui::SetScrollHereX(_center_x_ratio); }, nb::arg("_center_x_ratio")=0.5f, nb::rv_policy::automatic_reference);
    m.def("set_scroll_here_y", [](float _center_y_ratio) -> void { ImGui::SetScrollHereY(_center_y_ratio); }, nb::arg("_center_y_ratio")=0.5f, nb::rv_policy::automatic_reference);
    m.def("set_scroll_from_pos_x", [](float _local_x, float _center_x_ratio) -> void { ImGui::SetScrollFromPosX(_local_x, _center_x_ratio); }, nb::arg("_local_x"), nb::arg("_center_x_ratio")=0.5f, nb::rv_policy::automatic_reference);
    m.def("set_scroll_from_pos_y", [](float _local_y, float _center_y_ratio) -> void { ImGui::SetScrollFromPosY(_local_y, _center_y_ratio); }, nb::arg("_local_y"), nb::arg("_center_y_ratio")=0.5f, nb::rv_policy::automatic_reference);
    m.def("pop_font", []() -> void { ImGui::PopFont(); }, nb::rv_policy::automatic_reference);
    m.def("push_style_color", [](ImGuiCol _idx, ImU32 _col) -> void { ImGui::PushStyleColor(_idx, _col); }, nb::arg("_idx"), nb::arg("_col"), nb::rv_policy::automatic_reference);
    m.def("pop_style_color", [](int _count) -> void { ImGui::PopStyleColor(_count); }, nb::arg("_count")=1, nb::rv_policy::automatic_reference);
    m.def("push_style_var", [](ImGuiStyleVar _idx, float _val) -> void { ImGui::PushStyleVar(_idx, _val); }, nb::arg("_idx"), nb::arg("_val"), nb::rv_policy::automatic_reference);
    m.def("pop_style_var", [](int _count) -> void { ImGui::PopStyleVar(_count); }, nb::arg("_count")=1, nb::rv_policy::automatic_reference);
    m.def("push_allow_keyboard_focus", [](bool _allow_keyboard_focus) -> void { ImGui::PushAllowKeyboardFocus(_allow_keyboard_focus); }, nb::arg("_allow_keyboard_focus"), nb::rv_policy::automatic_reference);
    m.def("pop_allow_keyboard_focus", []() -> void { ImGui::PopAllowKeyboardFocus(); }, nb::rv_policy::automatic_reference);
    m.def("push_button_repeat", [](bool _repeat) -> void { ImGui::PushButtonRepeat(_repeat); }, nb::arg("_repeat"), nb::rv_policy::automatic_reference);
    m.def("pop_button_repeat", []() -> void { ImGui::PopButtonRepeat(); }, nb::rv_policy::automatic_reference);
    m.def("push_item_width", [](float _item_width) -> void { ImGui::PushItemWidth(_item_width); }, nb::arg("_item_width"), nb::rv_policy::automatic_reference);
    m.def("pop_item_width", []() -> void { ImGui::PopItemWidth(); }, nb::rv_policy::automatic_reference);
    m.def("set_next_item_width", [](float _item_width) -> void { ImGui::SetNextItemWidth(_item_width); }, nb::arg("_item_width"), nb::rv_policy::automatic_reference);
    m.def("calc_item_width", []() -> float { return ImGui::CalcItemWidth(); }, nb::rv_policy::automatic_reference);
    m.def("push_text_wrap_pos", [](float _wrap_local_pos_x) -> void { ImGui::PushTextWrapPos(_wrap_local_pos_x); }, nb::arg("_wrap_local_pos_x")=0.0f, nb::rv_policy::automatic_reference);
    m.def("pop_text_wrap_pos", []() -> void { ImGui::PopTextWrapPos(); }, nb::rv_policy::automatic_reference);
    m.def("get_font", []() -> ImFont * { return ImGui::GetFont(); }, nb::rv_policy::automatic_reference);
    m.def("get_font_size", []() -> float { return ImGui::GetFontSize(); }, nb::rv_policy::automatic_reference);
    m.def("get_font_tex_uv_white_pixel", []() -> ImVec2 { return ImGui::GetFontTexUvWhitePixel(); }, nb::rv_policy::automatic_reference);
    m.def("get_color_u32", [](ImGuiCol _idx, float _alpha_mul) -> ImU32 { return ImGui::GetColorU32(_idx, _alpha_mul); }, nb::arg("_idx"), nb::arg("_alpha_mul")=1.0f, nb::rv_policy::automatic_reference);
    m.def("get_style_color_vec4", [](ImGuiCol _idx) -> const ImVec4 & { return ImGui::GetStyleColorVec4(_idx); }, nb::arg("_idx"), nb::rv_policy::automatic_reference);
    m.def("separator", []() -> void { ImGui::Separator(); }, nb::rv_policy::automatic_reference);
    m.def("same_line", [](float _offset_from_start_x, float _spacing) -> void { ImGui::SameLine(_offset_from_start_x, _spacing); }, nb::arg("_offset_from_start_x")=0.0f, nb::arg("_spacing")=-1.0f, nb::rv_policy::automatic_reference);
    m.def("new_line", []() -> void { ImGui::NewLine(); }, nb::rv_policy::automatic_reference);
    m.def("spacing", []() -> void { ImGui::Spacing(); }, nb::rv_policy::automatic_reference);
    m.def("dummy", [](const ImVec2 & _size) -> void { ImGui::Dummy(_size); }, nb::arg("_size"), nb::rv_policy::automatic_reference);
    m.def("indent", [](float _indent_w) -> void { ImGui::Indent(_indent_w); }, nb::arg("_indent_w")=0.0f, nb::rv_policy::automatic_reference);
    m.def("unindent", [](float _indent_w) -> void { ImGui::Unindent(_indent_w); }, nb::arg("_indent_w")=0.0f, nb::rv_policy::automatic_reference);
    m.def("begin_group", []() -> void { ImGui::BeginGroup(); }, nb::rv_policy::automatic_reference);
    m.def("end_group", []() -> void { ImGui::EndGroup(); }, nb::rv_policy::automatic_reference);
    m.def("get_cursor_pos", []() -> ImVec2 { return ImGui::GetCursorPos(); }, nb::rv_policy::automatic_reference);
    m.def("get_cursor_pos_x", []() -> float { return ImGui::GetCursorPosX(); }, nb::rv_policy::automatic_reference);
    m.def("get_cursor_pos_y", []() -> float { return ImGui::GetCursorPosY(); }, nb::rv_policy::automatic_reference);
    m.def("set_cursor_pos", [](const ImVec2 & _local_pos) -> void { ImGui::SetCursorPos(_local_pos); }, nb::arg("_local_pos"), nb::rv_policy::automatic_reference);
    m.def("set_cursor_pos_x", [](float _local_x) -> void { ImGui::SetCursorPosX(_local_x); }, nb::arg("_local_x"), nb::rv_policy::automatic_reference);
    m.def("set_cursor_pos_y", [](float _local_y) -> void { ImGui::SetCursorPosY(_local_y); }, nb::arg("_local_y"), nb::rv_policy::automatic_reference);
    m.def("get_cursor_start_pos", []() -> ImVec2 { return ImGui::GetCursorStartPos(); }, nb::rv_policy::automatic_reference);
    m.def("get_cursor_screen_pos", []() -> ImVec2 { return ImGui::GetCursorScreenPos(); }, nb::rv_policy::automatic_reference);
    m.def("set_cursor_screen_pos", [](const ImVec2 & _pos) -> void { ImGui::SetCursorScreenPos(_pos); }, nb::arg("_pos"), nb::rv_policy::automatic_reference);
    m.def("align_text_to_frame_padding", []() -> void { ImGui::AlignTextToFramePadding(); }, nb::rv_policy::automatic_reference);
    m.def("get_text_line_height", []() -> float { return ImGui::GetTextLineHeight(); }, nb::rv_policy::automatic_reference);
    m.def("get_text_line_height_with_spacing", []() -> float { return ImGui::GetTextLineHeightWithSpacing(); }, nb::rv_policy::automatic_reference);
    m.def("get_frame_height", []() -> float { return ImGui::GetFrameHeight(); }, nb::rv_policy::automatic_reference);
    m.def("get_frame_height_with_spacing", []() -> float { return ImGui::GetFrameHeightWithSpacing(); }, nb::rv_policy::automatic_reference);
    m.def("push_id", [](nb::str & _str_id) -> void { ImGui::PushID(_str_id.c_str()); }, nb::arg("_str_id"), nb::rv_policy::automatic_reference);
    m.def("pop_id", []() -> void { ImGui::PopID(); }, nb::rv_policy::automatic_reference);
    m.def("get_id", [](nb::str & _str_id) -> ImGuiID { return ImGui::GetID(_str_id.c_str()); }, nb::arg("_str_id"), nb::rv_policy::automatic_reference);
    m.def("text_unformatted", [](nb::str & _text, nb::str & _text_end) -> void { ImGui::TextUnformatted(_text.c_str(), _text_end.c_str()); }, nb::arg("_text"), nb::arg("_text_end").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("text", [](nb::str & _fmt) -> void { ImGui::Text(_fmt.c_str()); }, nb::arg("_fmt"), nb::rv_policy::automatic_reference);
    m.def("text_colored", [](const ImVec4 & _col, nb::str & _fmt) -> void { ImGui::TextColored(_col, _fmt.c_str()); }, nb::arg("_col"), nb::arg("_fmt"), nb::rv_policy::automatic_reference);
    m.def("text_disabled", [](nb::str & _fmt) -> void { ImGui::TextDisabled(_fmt.c_str()); }, nb::arg("_fmt"), nb::rv_policy::automatic_reference);
    m.def("text_wrapped", [](nb::str & _fmt) -> void { ImGui::TextWrapped(_fmt.c_str()); }, nb::arg("_fmt"), nb::rv_policy::automatic_reference);
    m.def("label_text", [](nb::str & _label, nb::str & _fmt) -> void { ImGui::LabelText(_label.c_str(), _fmt.c_str()); }, nb::arg("_label"), nb::arg("_fmt"), nb::rv_policy::automatic_reference);
    m.def("bullet_text", [](nb::str & _fmt) -> void { ImGui::BulletText(_fmt.c_str()); }, nb::arg("_fmt"), nb::rv_policy::automatic_reference);
    m.def("button", [](nb::str & _label, const ImVec2 & _size) -> bool { return ImGui::Button(_label.c_str(), _size); }, nb::arg("_label"), nb::arg("_size")=ImVec2(0,0), nb::rv_policy::automatic_reference);
    m.def("small_button", [](nb::str & _label) -> bool { return ImGui::SmallButton(_label.c_str()); }, nb::arg("_label"), nb::rv_policy::automatic_reference);
    m.def("invisible_button", [](nb::str & _str_id, const ImVec2 & _size, ImGuiButtonFlags _flags) -> bool { return ImGui::InvisibleButton(_str_id.c_str(), _size, _flags); }, nb::arg("_str_id"), nb::arg("_size"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("arrow_button", [](nb::str & _str_id, ImGuiDir _dir) -> bool { return ImGui::ArrowButton(_str_id.c_str(), _dir); }, nb::arg("_str_id"), nb::arg("_dir"), nb::rv_policy::automatic_reference);
    m.def("checkbox", [](nb::str & _label, IMBIND_Data<bool> _v) -> bool { return ImGui::Checkbox(_label.c_str(), (bool*)_v.value().data()); }, nb::arg("_label"), nb::arg("_v"), nb::rv_policy::automatic_reference);
    m.def("checkbox_flags", [](nb::str & _label, IMBIND_Data<int> _flags, int _flags_value) -> bool { return ImGui::CheckboxFlags(_label.c_str(), (int*)_flags.value().data(), _flags_value); }, nb::arg("_label"), nb::arg("_flags"), nb::arg("_flags_value"), nb::rv_policy::automatic_reference);
    m.def("radio_button", [](nb::str & _label, bool _active) -> bool { return ImGui::RadioButton(_label.c_str(), _active); }, nb::arg("_label"), nb::arg("_active"), nb::rv_policy::automatic_reference);
    m.def("progress_bar", [](float _fraction, const ImVec2 & _size_arg, nb::str & _overlay) -> void { ImGui::ProgressBar(_fraction, _size_arg, _overlay.c_str()); }, nb::arg("_fraction"), nb::arg("_size_arg")=ImVec2(-FLT_MIN,0), nb::arg("_overlay").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("bullet", []() -> void { ImGui::Bullet(); }, nb::rv_policy::automatic_reference);
    m.def("begin_combo", [](nb::str & _label, nb::str & _preview_value, ImGuiComboFlags _flags) -> bool { return ImGui::BeginCombo(_label.c_str(), _preview_value.c_str(), _flags); }, nb::arg("_label"), nb::arg("_preview_value"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("end_combo", []() -> void { ImGui::EndCombo(); }, nb::rv_policy::automatic_reference);
    m.def("drag_float", [](nb::str & _label, IMBIND_Data<float> _v, float _v_speed, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::DragFloat(_label.c_str(), (float*)_v.value().data(), _v_speed, _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0.0f, nb::arg("_v_max")=0.0f, nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("drag_float2", [](nb::str & _label, IMBIND_Array<float, 2> _v, float _v_speed, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::DragFloat2(_label.c_str(), (float*)_v.value().data(), _v_speed, _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0.0f, nb::arg("_v_max")=0.0f, nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("drag_float3", [](nb::str & _label, IMBIND_Array<float, 3> _v, float _v_speed, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::DragFloat3(_label.c_str(), (float*)_v.value().data(), _v_speed, _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0.0f, nb::arg("_v_max")=0.0f, nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("drag_float4", [](nb::str & _label, IMBIND_Array<float, 4> _v, float _v_speed, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::DragFloat4(_label.c_str(), (float*)_v.value().data(), _v_speed, _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0.0f, nb::arg("_v_max")=0.0f, nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("drag_float_range2", [](nb::str & _label, IMBIND_Data<float> _v_current_min, IMBIND_Data<float> _v_current_max, float _v_speed, float _v_min, float _v_max, nb::str & _format, nb::str & _format_max, ImGuiSliderFlags _flags) -> bool { return ImGui::DragFloatRange2(_label.c_str(), (float*)_v_current_min.value().data(), (float*)_v_current_max.value().data(), _v_speed, _v_min, _v_max, _format.c_str(), _format_max.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v_current_min"), nb::arg("_v_current_max"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0.0f, nb::arg("_v_max")=0.0f, nb::arg("_format")="%.3f", nb::arg("_format_max").none()=nb::none(), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("drag_int", [](nb::str & _label, IMBIND_Data<int> _v, float _v_speed, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::DragInt(_label.c_str(), (int*)_v.value().data(), _v_speed, _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0, nb::arg("_v_max")=0, nb::arg("_format")="%d", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("drag_int2", [](nb::str & _label, IMBIND_Array<int, 2> _v, float _v_speed, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::DragInt2(_label.c_str(), (int*)_v.value().data(), _v_speed, _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0, nb::arg("_v_max")=0, nb::arg("_format")="%d", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("drag_int3", [](nb::str & _label, IMBIND_Array<int, 3> _v, float _v_speed, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::DragInt3(_label.c_str(), (int*)_v.value().data(), _v_speed, _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0, nb::arg("_v_max")=0, nb::arg("_format")="%d", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("drag_int4", [](nb::str & _label, IMBIND_Array<int, 4> _v, float _v_speed, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::DragInt4(_label.c_str(), (int*)_v.value().data(), _v_speed, _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0, nb::arg("_v_max")=0, nb::arg("_format")="%d", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("drag_int_range2", [](nb::str & _label, IMBIND_Data<int> _v_current_min, IMBIND_Data<int> _v_current_max, float _v_speed, int _v_min, int _v_max, nb::str & _format, nb::str & _format_max, ImGuiSliderFlags _flags) -> bool { return ImGui::DragIntRange2(_label.c_str(), (int*)_v_current_min.value().data(), (int*)_v_current_max.value().data(), _v_speed, _v_min, _v_max, _format.c_str(), _format_max.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v_current_min"), nb::arg("_v_current_max"), nb::arg("_v_speed")=1.0f, nb::arg("_v_min")=0, nb::arg("_v_max")=0, nb::arg("_format")="%d", nb::arg("_format_max").none()=nb::none(), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("slider_float", [](nb::str & _label, IMBIND_Data<float> _v, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::SliderFloat(_label.c_str(), (float*)_v.value().data(), _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("slider_float2", [](nb::str & _label, IMBIND_Array<float, 2> _v, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::SliderFloat2(_label.c_str(), (float*)_v.value().data(), _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("slider_float3", [](nb::str & _label, IMBIND_Array<float, 3> _v, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::SliderFloat3(_label.c_str(), (float*)_v.value().data(), _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("slider_float4", [](nb::str & _label, IMBIND_Array<float, 4> _v, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::SliderFloat4(_label.c_str(), (float*)_v.value().data(), _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("slider_angle", [](nb::str & _label, IMBIND_Data<float> _v_rad, float _v_degrees_min, float _v_degrees_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::SliderAngle(_label.c_str(), (float*)_v_rad.value().data(), _v_degrees_min, _v_degrees_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v_rad"), nb::arg("_v_degrees_min")=-360.0f, nb::arg("_v_degrees_max")=+360.0f, nb::arg("_format")="%.0f deg", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("slider_int", [](nb::str & _label, IMBIND_Data<int> _v, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::SliderInt(_label.c_str(), (int*)_v.value().data(), _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%d", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("slider_int2", [](nb::str & _label, IMBIND_Array<int, 2> _v, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::SliderInt2(_label.c_str(), (int*)_v.value().data(), _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%d", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("slider_int3", [](nb::str & _label, IMBIND_Array<int, 3> _v, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::SliderInt3(_label.c_str(), (int*)_v.value().data(), _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%d", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("slider_int4", [](nb::str & _label, IMBIND_Array<int, 4> _v, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::SliderInt4(_label.c_str(), (int*)_v.value().data(), _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%d", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("v_slider_float", [](nb::str & _label, const ImVec2 & _size, IMBIND_Data<float> _v, float _v_min, float _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::VSliderFloat(_label.c_str(), _size, (float*)_v.value().data(), _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_size"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("v_slider_int", [](nb::str & _label, const ImVec2 & _size, IMBIND_Data<int> _v, int _v_min, int _v_max, nb::str & _format, ImGuiSliderFlags _flags) -> bool { return ImGui::VSliderInt(_label.c_str(), _size, (int*)_v.value().data(), _v_min, _v_max, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_size"), nb::arg("_v"), nb::arg("_v_min"), nb::arg("_v_max"), nb::arg("_format")="%d", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("input_float", [](nb::str & _label, IMBIND_Data<float> _v, float _step, float _step_fast, nb::str & _format, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputFloat(_label.c_str(), (float*)_v.value().data(), _step, _step_fast, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_step")=0.0f, nb::arg("_step_fast")=0.0f, nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("input_float2", [](nb::str & _label, IMBIND_Array<float, 2> _v, nb::str & _format, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputFloat2(_label.c_str(), (float*)_v.value().data(), _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("input_float3", [](nb::str & _label, IMBIND_Array<float, 3> _v, nb::str & _format, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputFloat3(_label.c_str(), (float*)_v.value().data(), _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("input_float4", [](nb::str & _label, IMBIND_Array<float, 4> _v, nb::str & _format, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputFloat4(_label.c_str(), (float*)_v.value().data(), _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_format")="%.3f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("input_int", [](nb::str & _label, IMBIND_Data<int> _v, int _step, int _step_fast, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputInt(_label.c_str(), (int*)_v.value().data(), _step, _step_fast, _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_step")=1, nb::arg("_step_fast")=100, nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("input_int2", [](nb::str & _label, IMBIND_Array<int, 2> _v, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputInt2(_label.c_str(), (int*)_v.value().data(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("input_int3", [](nb::str & _label, IMBIND_Array<int, 3> _v, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputInt3(_label.c_str(), (int*)_v.value().data(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("input_int4", [](nb::str & _label, IMBIND_Array<int, 4> _v, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputInt4(_label.c_str(), (int*)_v.value().data(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("input_double", [](nb::str & _label, IMBIND_Data<double> _v, double _step, double _step_fast, nb::str & _format, ImGuiInputTextFlags _flags) -> bool { return ImGui::InputDouble(_label.c_str(), (double*)_v.value().data(), _step, _step_fast, _format.c_str(), _flags); }, nb::arg("_label"), nb::arg("_v"), nb::arg("_step")=0.0, nb::arg("_step_fast")=0.0, nb::arg("_format")="%.6f", nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("color_edit3", [](nb::str & _label, IMBIND_Array<float, 3> _col, ImGuiColorEditFlags _flags) -> bool { return ImGui::ColorEdit3(_label.c_str(), (float*)_col.value().data(), _flags); }, nb::arg("_label"), nb::arg("_col"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("color_edit4", [](nb::str & _label, IMBIND_Array<float, 4> _col, ImGuiColorEditFlags _flags) -> bool { return ImGui::ColorEdit4(_label.c_str(), (float*)_col.value().data(), _flags); }, nb::arg("_label"), nb::arg("_col"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("color_picker3", [](nb::str & _label, IMBIND_Array<float, 3> _col, ImGuiColorEditFlags _flags) -> bool { return ImGui::ColorPicker3(_label.c_str(), (float*)_col.value().data(), _flags); }, nb::arg("_label"), nb::arg("_col"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("color_picker4", [](nb::str & _label, IMBIND_Array<float, 4> _col, ImGuiColorEditFlags _flags, IMBIND_Data<float> _ref_col) -> bool { return ImGui::ColorPicker4(_label.c_str(), (float*)_col.value().data(), _flags, (float*)_ref_col.value().data()); }, nb::arg("_label"), nb::arg("_col"), nb::arg("_flags")=0, nb::arg("_ref_col").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("color_button", [](nb::str & _desc_id, const ImVec4 & _col, ImGuiColorEditFlags _flags, const ImVec2 & _size) -> bool { return ImGui::ColorButton(_desc_id.c_str(), _col, _flags, _size); }, nb::arg("_desc_id"), nb::arg("_col"), nb::arg("_flags")=0, nb::arg("_size")=ImVec2(0,0), nb::rv_policy::automatic_reference);
    m.def("set_color_edit_options", [](ImGuiColorEditFlags _flags) -> void { ImGui::SetColorEditOptions(_flags); }, nb::arg("_flags"), nb::rv_policy::automatic_reference);
    m.def("tree_node", [](nb::str & _label) -> bool { return ImGui::TreeNode(_label.c_str()); }, nb::arg("_label"), nb::rv_policy::automatic_reference);
    m.def("tree_node_ex", [](nb::str & _label, ImGuiTreeNodeFlags _flags) -> bool { return ImGui::TreeNodeEx(_label.c_str(), _flags); }, nb::arg("_label"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("tree_push", [](nb::str & _str_id) -> void { ImGui::TreePush(_str_id.c_str()); }, nb::arg("_str_id"), nb::rv_policy::automatic_reference);
    m.def("tree_pop", []() -> void { ImGui::TreePop(); }, nb::rv_policy::automatic_reference);
    m.def("get_tree_node_to_label_spacing", []() -> float { return ImGui::GetTreeNodeToLabelSpacing(); }, nb::rv_policy::automatic_reference);
    m.def("collapsing_header", [](nb::str & _label, ImGuiTreeNodeFlags _flags) -> bool { return ImGui::CollapsingHeader(_label.c_str(), _flags); }, nb::arg("_label"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("set_next_item_open", [](bool _is_open, ImGuiCond _cond) -> void { ImGui::SetNextItemOpen(_is_open, _cond); }, nb::arg("_is_open"), nb::arg("_cond")=0, nb::rv_policy::automatic_reference);
    m.def("selectable", [](nb::str & _label, bool _selected, ImGuiSelectableFlags _flags, const ImVec2 & _size) -> bool { return ImGui::Selectable(_label.c_str(), _selected, _flags, _size); }, nb::arg("_label"), nb::arg("_selected")=false, nb::arg("_flags")=0, nb::arg("_size")=ImVec2(0,0), nb::rv_policy::automatic_reference);
    m.def("begin_list_box", [](nb::str & _label, const ImVec2 & _size) -> bool { return ImGui::BeginListBox(_label.c_str(), _size); }, nb::arg("_label"), nb::arg("_size")=ImVec2(0,0), nb::rv_policy::automatic_reference);
    m.def("end_list_box", []() -> void { ImGui::EndListBox(); }, nb::rv_policy::automatic_reference);
    m.def("plot_lines", [](nb::str & _label, IMBIND_Data<float> _values, int _values_count, int _values_offset, nb::str & _overlay_text, float _scale_min, float _scale_max, ImVec2 _graph_size, int _stride) -> void { ImGui::PlotLines(_label.c_str(), (float*)_values.value().data(), _values_count, _values_offset, _overlay_text.c_str(), _scale_min, _scale_max, _graph_size, _stride); }, nb::arg("_label"), nb::arg("_values"), nb::arg("_values_count"), nb::arg("_values_offset")=0, nb::arg("_overlay_text").none()=nb::none(), nb::arg("_scale_min")=FLT_MAX, nb::arg("_scale_max")=FLT_MAX, nb::arg("_graph_size")=ImVec2(0,0), nb::arg("_stride")=sizeof(float), nb::rv_policy::automatic_reference);
    m.def("plot_histogram", [](nb::str & _label, IMBIND_Data<float> _values, int _values_count, int _values_offset, nb::str & _overlay_text, float _scale_min, float _scale_max, ImVec2 _graph_size, int _stride) -> void { ImGui::PlotHistogram(_label.c_str(), (float*)_values.value().data(), _values_count, _values_offset, _overlay_text.c_str(), _scale_min, _scale_max, _graph_size, _stride); }, nb::arg("_label"), nb::arg("_values"), nb::arg("_values_count"), nb::arg("_values_offset")=0, nb::arg("_overlay_text").none()=nb::none(), nb::arg("_scale_min")=FLT_MAX, nb::arg("_scale_max")=FLT_MAX, nb::arg("_graph_size")=ImVec2(0,0), nb::arg("_stride")=sizeof(float), nb::rv_policy::automatic_reference);
    m.def("value", [](nb::str & _prefix, bool _b) -> void { ImGui::Value(_prefix.c_str(), _b); }, nb::arg("_prefix"), nb::arg("_b"), nb::rv_policy::automatic_reference);
    m.def("begin_menu_bar", []() -> bool { return ImGui::BeginMenuBar(); }, nb::rv_policy::automatic_reference);
    m.def("end_menu_bar", []() -> void { ImGui::EndMenuBar(); }, nb::rv_policy::automatic_reference);
    m.def("begin_main_menu_bar", []() -> bool { return ImGui::BeginMainMenuBar(); }, nb::rv_policy::automatic_reference);
    m.def("end_main_menu_bar", []() -> void { ImGui::EndMainMenuBar(); }, nb::rv_policy::automatic_reference);
    m.def("begin_menu", [](nb::str & _label, bool _enabled) -> bool { return ImGui::BeginMenu(_label.c_str(), _enabled); }, nb::arg("_label"), nb::arg("_enabled")=true, nb::rv_policy::automatic_reference);
    m.def("end_menu", []() -> void { ImGui::EndMenu(); }, nb::rv_policy::automatic_reference);
    m.def("menu_item", [](nb::str & _label, nb::str & _shortcut, bool _selected, bool _enabled) -> bool { return ImGui::MenuItem(_label.c_str(), _shortcut.c_str(), _selected, _enabled); }, nb::arg("_label"), nb::arg("_shortcut").none()=nb::none(), nb::arg("_selected")=false, nb::arg("_enabled")=true, nb::rv_policy::automatic_reference);
    m.def("begin_tooltip", []() -> void { ImGui::BeginTooltip(); }, nb::rv_policy::automatic_reference);
    m.def("end_tooltip", []() -> void { ImGui::EndTooltip(); }, nb::rv_policy::automatic_reference);
    m.def("set_tooltip", [](nb::str & _fmt) -> void { ImGui::SetTooltip(_fmt.c_str()); }, nb::arg("_fmt"), nb::rv_policy::automatic_reference);
    m.def("begin_popup", [](nb::str & _str_id, ImGuiWindowFlags _flags) -> bool { return ImGui::BeginPopup(_str_id.c_str(), _flags); }, nb::arg("_str_id"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("begin_popup_modal", [](nb::str & _name, IMBIND_Data<bool> _p_open, ImGuiWindowFlags _flags) -> bool { return ImGui::BeginPopupModal(_name.c_str(), (bool*)_p_open.value().data(), _flags); }, nb::arg("_name"), nb::arg("_p_open").none()=nb::none(), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("end_popup", []() -> void { ImGui::EndPopup(); }, nb::rv_policy::automatic_reference);
    m.def("open_popup", [](nb::str & _str_id, ImGuiPopupFlags _popup_flags) -> void { ImGui::OpenPopup(_str_id.c_str(), _popup_flags); }, nb::arg("_str_id"), nb::arg("_popup_flags")=0, nb::rv_policy::automatic_reference);
    m.def("open_popup_on_item_click", [](nb::str & _str_id, ImGuiPopupFlags _popup_flags) -> void { ImGui::OpenPopupOnItemClick(_str_id.c_str(), _popup_flags); }, nb::arg("_str_id").none()=nb::none(), nb::arg("_popup_flags")=1, nb::rv_policy::automatic_reference);
    m.def("close_current_popup", []() -> void { ImGui::CloseCurrentPopup(); }, nb::rv_policy::automatic_reference);
    m.def("begin_popup_context_item", [](nb::str & _str_id, ImGuiPopupFlags _popup_flags) -> bool { return ImGui::BeginPopupContextItem(_str_id.c_str(), _popup_flags); }, nb::arg("_str_id").none()=nb::none(), nb::arg("_popup_flags")=1, nb::rv_policy::automatic_reference);
    m.def("begin_popup_context_window", [](nb::str & _str_id, ImGuiPopupFlags _popup_flags) -> bool { return ImGui::BeginPopupContextWindow(_str_id.c_str(), _popup_flags); }, nb::arg("_str_id").none()=nb::none(), nb::arg("_popup_flags")=1, nb::rv_policy::automatic_reference);
    m.def("begin_popup_context_void", [](nb::str & _str_id, ImGuiPopupFlags _popup_flags) -> bool { return ImGui::BeginPopupContextVoid(_str_id.c_str(), _popup_flags); }, nb::arg("_str_id").none()=nb::none(), nb::arg("_popup_flags")=1, nb::rv_policy::automatic_reference);
    m.def("is_popup_open", [](nb::str & _str_id, ImGuiPopupFlags _flags) -> bool { return ImGui::IsPopupOpen(_str_id.c_str(), _flags); }, nb::arg("_str_id"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("begin_table", [](nb::str & _str_id, int _column, ImGuiTableFlags _flags, const ImVec2 & _outer_size, float _inner_width) -> bool { return ImGui::BeginTable(_str_id.c_str(), _column, _flags, _outer_size, _inner_width); }, nb::arg("_str_id"), nb::arg("_column"), nb::arg("_flags")=0, nb::arg("_outer_size")=ImVec2(0.0f,0.0f), nb::arg("_inner_width")=0.0f, nb::rv_policy::automatic_reference);
    m.def("end_table", []() -> void { ImGui::EndTable(); }, nb::rv_policy::automatic_reference);
    m.def("table_next_row", [](ImGuiTableRowFlags _row_flags, float _min_row_height) -> void { ImGui::TableNextRow(_row_flags, _min_row_height); }, nb::arg("_row_flags")=0, nb::arg("_min_row_height")=0.0f, nb::rv_policy::automatic_reference);
    m.def("table_next_column", []() -> bool { return ImGui::TableNextColumn(); }, nb::rv_policy::automatic_reference);
    m.def("table_set_column_index", [](int _column_n) -> bool { return ImGui::TableSetColumnIndex(_column_n); }, nb::arg("_column_n"), nb::rv_policy::automatic_reference);
    m.def("table_setup_column", [](nb::str & _label, ImGuiTableColumnFlags _flags, float _init_width_or_weight, ImGuiID _user_id) -> void { ImGui::TableSetupColumn(_label.c_str(), _flags, _init_width_or_weight, _user_id); }, nb::arg("_label"), nb::arg("_flags")=0, nb::arg("_init_width_or_weight")=0.0f, nb::arg("_user_id")=0, nb::rv_policy::automatic_reference);
    m.def("table_setup_scroll_freeze", [](int _cols, int _rows) -> void { ImGui::TableSetupScrollFreeze(_cols, _rows); }, nb::arg("_cols"), nb::arg("_rows"), nb::rv_policy::automatic_reference);
    m.def("table_headers_row", []() -> void { ImGui::TableHeadersRow(); }, nb::rv_policy::automatic_reference);
    m.def("table_header", [](nb::str & _label) -> void { ImGui::TableHeader(_label.c_str()); }, nb::arg("_label"), nb::rv_policy::automatic_reference);
    m.def("table_get_sort_specs", []() -> ImGuiTableSortSpecs * { return ImGui::TableGetSortSpecs(); }, nb::rv_policy::automatic_reference);
    m.def("table_get_column_count", []() -> int { return ImGui::TableGetColumnCount(); }, nb::rv_policy::automatic_reference);
    m.def("table_get_column_index", []() -> int { return ImGui::TableGetColumnIndex(); }, nb::rv_policy::automatic_reference);
    m.def("table_get_row_index", []() -> int { return ImGui::TableGetRowIndex(); }, nb::rv_policy::automatic_reference);
    m.def("table_get_column_name", [](int _column_n) -> const char * { return ImGui::TableGetColumnName(_column_n); }, nb::arg("_column_n")=-1, nb::rv_policy::automatic_reference);
    m.def("table_get_column_flags", [](int _column_n) -> ImGuiTableColumnFlags { return ImGui::TableGetColumnFlags(_column_n); }, nb::arg("_column_n")=-1, nb::rv_policy::automatic_reference);
    m.def("table_set_column_enabled", [](int _column_n, bool _v) -> void { ImGui::TableSetColumnEnabled(_column_n, _v); }, nb::arg("_column_n"), nb::arg("_v"), nb::rv_policy::automatic_reference);
    m.def("table_set_bg_color", [](ImGuiTableBgTarget _target, ImU32 _color, int _column_n) -> void { ImGui::TableSetBgColor(_target, _color, _column_n); }, nb::arg("_target"), nb::arg("_color"), nb::arg("_column_n")=-1, nb::rv_policy::automatic_reference);
    m.def("columns", [](int _count, nb::str & _id, bool _border) -> void { ImGui::Columns(_count, _id.c_str(), _border); }, nb::arg("_count")=1, nb::arg("_id").none()=nb::none(), nb::arg("_border")=true, nb::rv_policy::automatic_reference);
    m.def("next_column", []() -> void { ImGui::NextColumn(); }, nb::rv_policy::automatic_reference);
    m.def("get_column_index", []() -> int { return ImGui::GetColumnIndex(); }, nb::rv_policy::automatic_reference);
    m.def("get_column_width", [](int _column_index) -> float { return ImGui::GetColumnWidth(_column_index); }, nb::arg("_column_index")=-1, nb::rv_policy::automatic_reference);
    m.def("set_column_width", [](int _column_index, float _width) -> void { ImGui::SetColumnWidth(_column_index, _width); }, nb::arg("_column_index"), nb::arg("_width"), nb::rv_policy::automatic_reference);
    m.def("get_column_offset", [](int _column_index) -> float { return ImGui::GetColumnOffset(_column_index); }, nb::arg("_column_index")=-1, nb::rv_policy::automatic_reference);
    m.def("set_column_offset", [](int _column_index, float _offset_x) -> void { ImGui::SetColumnOffset(_column_index, _offset_x); }, nb::arg("_column_index"), nb::arg("_offset_x"), nb::rv_policy::automatic_reference);
    m.def("get_columns_count", []() -> int { return ImGui::GetColumnsCount(); }, nb::rv_policy::automatic_reference);
    m.def("begin_tab_bar", [](nb::str & _str_id, ImGuiTabBarFlags _flags) -> bool { return ImGui::BeginTabBar(_str_id.c_str(), _flags); }, nb::arg("_str_id"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("end_tab_bar", []() -> void { ImGui::EndTabBar(); }, nb::rv_policy::automatic_reference);
    m.def("begin_tab_item", [](nb::str & _label, IMBIND_Data<bool> _p_open, ImGuiTabItemFlags _flags) -> bool { return ImGui::BeginTabItem(_label.c_str(), (bool*)_p_open.value().data(), _flags); }, nb::arg("_label"), nb::arg("_p_open").none()=nb::none(), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("end_tab_item", []() -> void { ImGui::EndTabItem(); }, nb::rv_policy::automatic_reference);
    m.def("tab_item_button", [](nb::str & _label, ImGuiTabItemFlags _flags) -> bool { return ImGui::TabItemButton(_label.c_str(), _flags); }, nb::arg("_label"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("set_tab_item_closed", [](nb::str & _tab_or_docked_window_label) -> void { ImGui::SetTabItemClosed(_tab_or_docked_window_label.c_str()); }, nb::arg("_tab_or_docked_window_label"), nb::rv_policy::automatic_reference);
    m.def("log_to_tty", [](int _auto_open_depth) -> void { ImGui::LogToTTY(_auto_open_depth); }, nb::arg("_auto_open_depth")=-1, nb::rv_policy::automatic_reference);
    m.def("log_to_file", [](int _auto_open_depth, nb::str & _filename) -> void { ImGui::LogToFile(_auto_open_depth, _filename.c_str()); }, nb::arg("_auto_open_depth")=-1, nb::arg("_filename").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("log_to_clipboard", [](int _auto_open_depth) -> void { ImGui::LogToClipboard(_auto_open_depth); }, nb::arg("_auto_open_depth")=-1, nb::rv_policy::automatic_reference);
    m.def("log_finish", []() -> void { ImGui::LogFinish(); }, nb::rv_policy::automatic_reference);
    m.def("log_buttons", []() -> void { ImGui::LogButtons(); }, nb::rv_policy::automatic_reference);
    m.def("log_text", [](nb::str & _fmt) -> void { ImGui::LogText(_fmt.c_str()); }, nb::arg("_fmt"), nb::rv_policy::automatic_reference);
    m.def("begin_drag_drop_source", [](ImGuiDragDropFlags _flags) -> bool { return ImGui::BeginDragDropSource(_flags); }, nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("end_drag_drop_source", []() -> void { ImGui::EndDragDropSource(); }, nb::rv_policy::automatic_reference);
    m.def("begin_drag_drop_target", []() -> bool { return ImGui::BeginDragDropTarget(); }, nb::rv_policy::automatic_reference);
    m.def("accept_drag_drop_payload", [](nb::str & _type, ImGuiDragDropFlags _flags) -> const ImGuiPayload * { return ImGui::AcceptDragDropPayload(_type.c_str(), _flags); }, nb::arg("_type"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("end_drag_drop_target", []() -> void { ImGui::EndDragDropTarget(); }, nb::rv_policy::automatic_reference);
    m.def("get_drag_drop_payload", []() -> const ImGuiPayload * { return ImGui::GetDragDropPayload(); }, nb::rv_policy::automatic_reference);
    m.def("begin_disabled", [](bool _disabled) -> void { ImGui::BeginDisabled(_disabled); }, nb::arg("_disabled")=true, nb::rv_policy::automatic_reference);
    m.def("end_disabled", []() -> void { ImGui::EndDisabled(); }, nb::rv_policy::automatic_reference);
    m.def("push_clip_rect", [](const ImVec2 & _clip_rect_min, const ImVec2 & _clip_rect_max, bool _intersect_with_current_clip_rect) -> void { ImGui::PushClipRect(_clip_rect_min, _clip_rect_max, _intersect_with_current_clip_rect); }, nb::arg("_clip_rect_min"), nb::arg("_clip_rect_max"), nb::arg("_intersect_with_current_clip_rect"), nb::rv_policy::automatic_reference);
    m.def("pop_clip_rect", []() -> void { ImGui::PopClipRect(); }, nb::rv_policy::automatic_reference);
    m.def("set_item_default_focus", []() -> void { ImGui::SetItemDefaultFocus(); }, nb::rv_policy::automatic_reference);
    m.def("set_keyboard_focus_here", [](int _offset) -> void { ImGui::SetKeyboardFocusHere(_offset); }, nb::arg("_offset")=0, nb::rv_policy::automatic_reference);
    m.def("is_item_hovered", [](ImGuiHoveredFlags _flags) -> bool { return ImGui::IsItemHovered(_flags); }, nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("is_item_active", []() -> bool { return ImGui::IsItemActive(); }, nb::rv_policy::automatic_reference);
    m.def("is_item_focused", []() -> bool { return ImGui::IsItemFocused(); }, nb::rv_policy::automatic_reference);
    m.def("is_item_clicked", [](ImGuiMouseButton _mouse_button) -> bool { return ImGui::IsItemClicked(_mouse_button); }, nb::arg("_mouse_button")=0, nb::rv_policy::automatic_reference);
    m.def("is_item_visible", []() -> bool { return ImGui::IsItemVisible(); }, nb::rv_policy::automatic_reference);
    m.def("is_item_edited", []() -> bool { return ImGui::IsItemEdited(); }, nb::rv_policy::automatic_reference);
    m.def("is_item_activated", []() -> bool { return ImGui::IsItemActivated(); }, nb::rv_policy::automatic_reference);
    m.def("is_item_deactivated", []() -> bool { return ImGui::IsItemDeactivated(); }, nb::rv_policy::automatic_reference);
    m.def("is_item_deactivated_after_edit", []() -> bool { return ImGui::IsItemDeactivatedAfterEdit(); }, nb::rv_policy::automatic_reference);
    m.def("is_item_toggled_open", []() -> bool { return ImGui::IsItemToggledOpen(); }, nb::rv_policy::automatic_reference);
    m.def("is_any_item_hovered", []() -> bool { return ImGui::IsAnyItemHovered(); }, nb::rv_policy::automatic_reference);
    m.def("is_any_item_active", []() -> bool { return ImGui::IsAnyItemActive(); }, nb::rv_policy::automatic_reference);
    m.def("is_any_item_focused", []() -> bool { return ImGui::IsAnyItemFocused(); }, nb::rv_policy::automatic_reference);
    m.def("get_item_rect_min", []() -> ImVec2 { return ImGui::GetItemRectMin(); }, nb::rv_policy::automatic_reference);
    m.def("get_item_rect_max", []() -> ImVec2 { return ImGui::GetItemRectMax(); }, nb::rv_policy::automatic_reference);
    m.def("get_item_rect_size", []() -> ImVec2 { return ImGui::GetItemRectSize(); }, nb::rv_policy::automatic_reference);
    m.def("set_item_allow_overlap", []() -> void { ImGui::SetItemAllowOverlap(); }, nb::rv_policy::automatic_reference);
    m.def("get_main_viewport", []() -> ImGuiViewport * { return ImGui::GetMainViewport(); }, nb::rv_policy::automatic_reference);
    m.def("get_background_draw_list", []() -> ImDrawList * { return ImGui::GetBackgroundDrawList(); }, nb::rv_policy::automatic_reference);
    m.def("get_foreground_draw_list", []() -> ImDrawList * { return ImGui::GetForegroundDrawList(); }, nb::rv_policy::automatic_reference);
    m.def("is_rect_visible", [](const ImVec2 & _size) -> bool { return ImGui::IsRectVisible(_size); }, nb::arg("_size"), nb::rv_policy::automatic_reference);
    m.def("get_time", []() -> double { return ImGui::GetTime(); }, nb::rv_policy::automatic_reference);
    m.def("get_frame_count", []() -> int { return ImGui::GetFrameCount(); }, nb::rv_policy::automatic_reference);
    m.def("get_draw_list_shared_data", []() -> ImDrawListSharedData * { return ImGui::GetDrawListSharedData(); }, nb::rv_policy::automatic_reference);
    m.def("get_style_color_name", [](ImGuiCol _idx) -> const char * { return ImGui::GetStyleColorName(_idx); }, nb::arg("_idx"), nb::rv_policy::automatic_reference);
    m.def("get_state_storage", []() -> ImGuiStorage * { return ImGui::GetStateStorage(); }, nb::rv_policy::automatic_reference);
    m.def("begin_child_frame", [](ImGuiID _id, const ImVec2 & _size, ImGuiWindowFlags _flags) -> bool { return ImGui::BeginChildFrame(_id, _size, _flags); }, nb::arg("_id"), nb::arg("_size"), nb::arg("_flags")=0, nb::rv_policy::automatic_reference);
    m.def("end_child_frame", []() -> void { ImGui::EndChildFrame(); }, nb::rv_policy::automatic_reference);
    m.def("calc_text_size", [](nb::str & _text, nb::str & _text_end, bool _hide_text_after_double_hash, float _wrap_width) -> ImVec2 { return ImGui::CalcTextSize(_text.c_str(), _text_end.c_str(), _hide_text_after_double_hash, _wrap_width); }, nb::arg("_text"), nb::arg("_text_end").none()=nb::none(), nb::arg("_hide_text_after_double_hash")=false, nb::arg("_wrap_width")=-1.0f, nb::rv_policy::automatic_reference);
    m.def("color_convert_u32_to_float4", [](ImU32 _in) -> ImVec4 { return ImGui::ColorConvertU32ToFloat4(_in); }, nb::arg("_in"), nb::rv_policy::automatic_reference);
    m.def("color_convert_float4_to_u32", [](const ImVec4 & _in) -> ImU32 { return ImGui::ColorConvertFloat4ToU32(_in); }, nb::arg("_in"), nb::rv_policy::automatic_reference);
    m.def("color_convert_rg_bto_hsv", [](float _r, float _g, float _b, float & _out_h, float & _out_s, float & _out_v) -> void { ImGui::ColorConvertRGBtoHSV(_r, _g, _b, _out_h, _out_s, _out_v); }, nb::arg("_r"), nb::arg("_g"), nb::arg("_b"), nb::arg("_out_h"), nb::arg("_out_s"), nb::arg("_out_v"), nb::rv_policy::automatic_reference);
    m.def("color_convert_hs_vto_rgb", [](float _h, float _s, float _v, float & _out_r, float & _out_g, float & _out_b) -> void { ImGui::ColorConvertHSVtoRGB(_h, _s, _v, _out_r, _out_g, _out_b); }, nb::arg("_h"), nb::arg("_s"), nb::arg("_v"), nb::arg("_out_r"), nb::arg("_out_g"), nb::arg("_out_b"), nb::rv_policy::automatic_reference);
    m.def("is_key_down", [](ImGuiKey _key) -> bool { return ImGui::IsKeyDown(_key); }, nb::arg("_key"), nb::rv_policy::automatic_reference);
    m.def("is_key_pressed", [](ImGuiKey _key, bool _repeat) -> bool { return ImGui::IsKeyPressed(_key, _repeat); }, nb::arg("_key"), nb::arg("_repeat")=true, nb::rv_policy::automatic_reference);
    m.def("is_key_released", [](ImGuiKey _key) -> bool { return ImGui::IsKeyReleased(_key); }, nb::arg("_key"), nb::rv_policy::automatic_reference);
    m.def("get_key_pressed_amount", [](ImGuiKey _key, float _repeat_delay, float _rate) -> int { return ImGui::GetKeyPressedAmount(_key, _repeat_delay, _rate); }, nb::arg("_key"), nb::arg("_repeat_delay"), nb::arg("_rate"), nb::rv_policy::automatic_reference);
    m.def("get_key_name", [](ImGuiKey _key) -> const char * { return ImGui::GetKeyName(_key); }, nb::arg("_key"), nb::rv_policy::automatic_reference);
    m.def("capture_keyboard_from_app", [](bool _want_capture_keyboard_value) -> void { ImGui::CaptureKeyboardFromApp(_want_capture_keyboard_value); }, nb::arg("_want_capture_keyboard_value")=true, nb::rv_policy::automatic_reference);
    m.def("is_mouse_down", [](ImGuiMouseButton _button) -> bool { return ImGui::IsMouseDown(_button); }, nb::arg("_button"), nb::rv_policy::automatic_reference);
    m.def("is_mouse_clicked", [](ImGuiMouseButton _button, bool _repeat) -> bool { return ImGui::IsMouseClicked(_button, _repeat); }, nb::arg("_button"), nb::arg("_repeat")=false, nb::rv_policy::automatic_reference);
    m.def("is_mouse_released", [](ImGuiMouseButton _button) -> bool { return ImGui::IsMouseReleased(_button); }, nb::arg("_button"), nb::rv_policy::automatic_reference);
    m.def("is_mouse_double_clicked", [](ImGuiMouseButton _button) -> bool { return ImGui::IsMouseDoubleClicked(_button); }, nb::arg("_button"), nb::rv_policy::automatic_reference);
    m.def("get_mouse_clicked_count", [](ImGuiMouseButton _button) -> int { return ImGui::GetMouseClickedCount(_button); }, nb::arg("_button"), nb::rv_policy::automatic_reference);
    m.def("is_mouse_hovering_rect", [](const ImVec2 & _r_min, const ImVec2 & _r_max, bool _clip) -> bool { return ImGui::IsMouseHoveringRect(_r_min, _r_max, _clip); }, nb::arg("_r_min"), nb::arg("_r_max"), nb::arg("_clip")=true, nb::rv_policy::automatic_reference);
    m.def("is_mouse_pos_valid", [](const ImVec2 * _mouse_pos) -> bool { return ImGui::IsMousePosValid(_mouse_pos); }, nb::arg("_mouse_pos").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("is_any_mouse_down", []() -> bool { return ImGui::IsAnyMouseDown(); }, nb::rv_policy::automatic_reference);
    m.def("get_mouse_pos", []() -> ImVec2 { return ImGui::GetMousePos(); }, nb::rv_policy::automatic_reference);
    m.def("get_mouse_pos_on_opening_current_popup", []() -> ImVec2 { return ImGui::GetMousePosOnOpeningCurrentPopup(); }, nb::rv_policy::automatic_reference);
    m.def("is_mouse_dragging", [](ImGuiMouseButton _button, float _lock_threshold) -> bool { return ImGui::IsMouseDragging(_button, _lock_threshold); }, nb::arg("_button"), nb::arg("_lock_threshold")=-1.0f, nb::rv_policy::automatic_reference);
    m.def("get_mouse_drag_delta", [](ImGuiMouseButton _button, float _lock_threshold) -> ImVec2 { return ImGui::GetMouseDragDelta(_button, _lock_threshold); }, nb::arg("_button")=0, nb::arg("_lock_threshold")=-1.0f, nb::rv_policy::automatic_reference);
    m.def("reset_mouse_drag_delta", [](ImGuiMouseButton _button) -> void { ImGui::ResetMouseDragDelta(_button); }, nb::arg("_button")=0, nb::rv_policy::automatic_reference);
    m.def("get_mouse_cursor", []() -> ImGuiMouseCursor { return ImGui::GetMouseCursor(); }, nb::rv_policy::automatic_reference);
    m.def("set_mouse_cursor", [](ImGuiMouseCursor _cursor_type) -> void { ImGui::SetMouseCursor(_cursor_type); }, nb::arg("_cursor_type"), nb::rv_policy::automatic_reference);
    m.def("capture_mouse_from_app", [](bool _want_capture_mouse_value) -> void { ImGui::CaptureMouseFromApp(_want_capture_mouse_value); }, nb::arg("_want_capture_mouse_value")=true, nb::rv_policy::automatic_reference);
    m.def("get_clipboard_text", []() -> const char * { return ImGui::GetClipboardText(); }, nb::rv_policy::automatic_reference);
    m.def("set_clipboard_text", [](nb::str & _text) -> void { ImGui::SetClipboardText(_text.c_str()); }, nb::arg("_text"), nb::rv_policy::automatic_reference);
    m.def("load_ini_settings_from_disk", [](nb::str & _ini_filename) -> void { ImGui::LoadIniSettingsFromDisk(_ini_filename.c_str()); }, nb::arg("_ini_filename"), nb::rv_policy::automatic_reference);
    m.def("load_ini_settings_from_memory", [](nb::str & _ini_data, size_t _ini_size) -> void { ImGui::LoadIniSettingsFromMemory(_ini_data.c_str(), _ini_size); }, nb::arg("_ini_data"), nb::arg("_ini_size")=0, nb::rv_policy::automatic_reference);
    m.def("save_ini_settings_to_disk", [](nb::str & _ini_filename) -> void { ImGui::SaveIniSettingsToDisk(_ini_filename.c_str()); }, nb::arg("_ini_filename"), nb::rv_policy::automatic_reference);
    m.def("save_ini_settings_to_memory", [](IMBIND_Data<size_t> _out_ini_size) -> const char * { return ImGui::SaveIniSettingsToMemory((size_t*)_out_ini_size.value().data()); }, nb::arg("_out_ini_size").none()=nb::none(), nb::rv_policy::automatic_reference);
    m.def("get_key_index", [](ImGuiKey _key) -> int { return ImGui::GetKeyIndex(_key); }, nb::arg("_key"), nb::rv_policy::automatic_reference);
    m.def("calc_list_clipping", [](int _items_count, float _items_height, IMBIND_Data<int> _out_items_display_start, IMBIND_Data<int> _out_items_display_end) -> void { ImGui::CalcListClipping(_items_count, _items_height, (int*)_out_items_display_start.value().data(), (int*)_out_items_display_end.value().data()); }, nb::arg("_items_count"), nb::arg("_items_height"), nb::arg("_out_items_display_start"), nb::arg("_out_items_display_end"), nb::rv_policy::automatic_reference);
    m.def("list_box_header", [](nb::str & _label, int _items_count, int _height_in_items) -> bool { return ImGui::ListBoxHeader(_label.c_str(), _items_count, _height_in_items); }, nb::arg("_label"), nb::arg("_items_count"), nb::arg("_height_in_items")=-1, nb::rv_policy::automatic_reference);

}
